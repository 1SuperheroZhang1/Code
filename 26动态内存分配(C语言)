#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//struct S {
//	char name[20];
//	int age;
//};
//
//int main()
//{
//	int n = 0;
//	scanf("%d",&n);
//	struct S arr[n];
//	//50个 struct S 类型的数据
//	//30 - 不够
//	//60 - 浪费
//	return 0;
//}

//C语言是可以创建变长数组的 - C99增加了
//动态内存函数
//1.malloc 和 free
/*malloc函数 - 开辟内存块
   函数原型:void* malloc(size_t size);
   函数头文件 #include<stdlib.h>或#include<malloc.h>
   此函数向内存申请一块连续可用的空间，并返回指向这个空间的指针。
   如果开辟成功，则返回一个指向开辟好空间的指针
   如果开辟失败，则返回一个NULL指针
   因此，malloc函数一定要做检查。
   如果参数size为0,malloc的行为是标准未定义的，取决于编译器。
*/ 
/*free函数 - 专门用来做动态内存的释放和回收。
  函数原型:void* free(void * memblock);
  函数头文件 #include<stdlib.h>或#include<malloc.h>
  此函数用来释放动态开辟的内存
  如果参数memblock指向的空间不是动态开辟的,那free函数的行为是未定义的。
  如果参数memblock是NULL指针，则函数什么都不做。
*/
#include<stdlib.h>
#include<string.h>
#include<errno.h>
//int main()
//{
//	//向内存申请10个整形的空间
//	int *p=(int*)malloc(10 * sizeof(int));
//	//int* p = (int*)malloc(INT_MAX);//error
//
//	if (p == NULL)
//	{
//		//打印错误原因的一种方式
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		//正常使用内存
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ",*(p + i));
//		}
//	}
//	//当动态申请的空间不再使用的时候，就应该还给操作系统。 - 释放内存
//	free(p);
//	p = NULL;//避免野指针问题
//	return 0;
//}
//2.calloc和realloc
/*calloc函数
  函数原型:void*calloc(size_t num,size_t size);
  num为元素个数
  size为每个元素的长度 - 单位是字节
  函数头文件 #include<stdlib.h>或#include<malloc.h>
  函数功能是为num个大小为size的元素开辟一块内存空间，并且把空间的每个字节初始化为0。
  与malloc函数的区别仅在于calloc函数会在返回地址之前把申请的空间的每个字节初始化为0。
*/
//int main()
//{
//	//malloc(10*sizeof(int))
//	int *p=(int *)calloc(10,sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", * (p + i));
//		}
//
//	}
//	//free函数 - 用来释放动态开辟的空间
//	free(p);
//	p = NULL;//避免野指针
//	return 0;
//}
/*realloc函数 - 可以做到对动态开辟内存大小的调整。
  函数原型:void* realloc(void * memblock,size_t size);
  memblock是要调整的内存地址。
  size是调整之后的新大小。
  返回值为调整之后的内存的起始地址。
  realloc函数的出现让动态内存管理更加灵活。
  realloc函数使用的注意事项：
  1.如果memblock指向的内存空间之后，有足够的内存空间可以追加，则直接追加，后返回memblock
  2.如果memblock指向的内存空间之后，没有足够的内存空间可以追加，则realloc函数会重新找一个新的内存区域，
    开辟一块满足需求的空间，并且把原来内存的数据拷贝回来，释放旧的内存空间，最后返回新开辟的内存空间地址。
  3.得用一个新的变量来接收realloc函数的返回值。
*/
//int main()
//{
//	int *p=(int *)malloc(20);//使用malloc函数开辟20个字节的空间
//	if (p == NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 5; i++)
//		{
//			*(p + i) = i;
//		}
//	}
//	//假设20个字节的空间不够，想要开辟40个字节的空间
//	//可以使用realloc来调整动态开辟的内存
//	int* p2 = realloc(p, 40);
//	if (p2 != NULL)
//	{
//		p = p2;
//		int i = 0;
//		for (i = 5; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	//释放内存
//	free(p);
//	p = NULL;//避免野指针
//}

/*常见的动态内存错误:
  1.对NULL指针的解引用操作
  2.对动态开辟空间的越界访问
  3.对非动态开辟内存使用free函数
  4.使用free函数释放一块动态开辟内存的一部分
  5.对同一块动态内存多次释放
  6.对动态开辟空间忘记释放(内存泄漏)
*/

int main()
{
    //1.对NULL指针进行解引用操作 - 使用malloc函数时要进行检查 - 检查是否为空指针
    //int *p=(int *)malloc(40);
    ////万一malloc开辟内存空间失败，p就被赋值为NULL
    ////*p=0;//err - 对NULL指针进行解引用操作
    //int i = 0;
    //for (i = 0; i < 10; i++)
    //{
    //    *(p + i) = i;//err - 对NULL指针进行解引用操作
    //}
    // 释放内存
    //free(p);
    //p = NULL;//避免野指针

    //2.对动态开辟空间的越界访问
    //int *p=(int *)malloc(5 * sizeof(int));
    //if (p == NULL)
    //{
    //    return 0;
    //}
    //else
    //{
    //    int i = 0;
    //    for (i = 0; i < 10; i++)//对动态开辟空间的越界访问
    //    {
    //        *(p + i) = i;
    //    }
    //}
    ////释放内存
    //free(p);
    //p = NULL;//避免野指针

    //3.对非动态开辟内存使用free函数
    //int a = 10;
    //int *p=&a;
    //*p = 20;
    //free(p);//对非动态开辟内存使用free函数
    //p = NULL;

    //4.使用free函数释放一块动态开辟内存的一部分
    //int* p = (int*)malloc(40);
    //if (p == NULL)
    //{
    //    return 0;
    //}
    //else
    //{
    //    int i = 0;
    //    for (i = 0; i < 10; i++)
    //    {
    //        *p++ = i;
    //    }
    //}
    ////释放内存 - 回收空间
    //free(p);//使用free函数释放一块动态开辟内存的一部分
    //p = NULL;

    //5.对同一块动态内存多次释放
    //int* p = (int*)malloc(40);
    //if (p == NULL)
    //{
    //    return 0;
    //}
    //else
    //{
    //    //使用空间
    //}
    ////释放空间
    //free(p);//err
    ////p = NULL;//解决方案：p=NULL;
    ////...
    //free(p);

    //6.对动态开辟空间忘记释放(内存泄漏)
    //while (1)
    //{
    //    malloc(1);
    //}
    return 0;
}
