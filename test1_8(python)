# Superhero Zhang
#字符串:在python中的字符串是基本数据类型，是一个不可变的字符序列
#字符串的驻留机制:
'''仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中，
       python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同的字符串时，不会开辟新的空间，
       而是把该字符串的地址赋给新创建的变量'''
    #驻留机制的几种情况(交互模式)
        #字符串的长度为0或1时
        #符合标识符的字符串
        #字符串只在编译时进行驻留，而非运行时
        #[-5,256]之间的整数数字
        #sys中的intern方法强制2个字符串指向同一个对象
        #Oycharm对字符串进行了优化处理
    #字符串驻留机制的优缺点
        #1.当需要相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，
        #因此拼接字符串和修改字符串是比较影响性能的。
        #2.在需要进行字符串拼接时建议使用str类型的join方法，而非+,
        #因为join()方法是先计算出所有字符串的长度，然后再拷贝，只new一次对象，效率要比”+“效率高
#字符串的常用操作
    #字符串的查询操作的方法
        #功能                   方法名称                     作用
        #                      index()        查找子串substr第一次出现的位置，如果查找的子串不存在时，则抛出ValueError
        #                      rindex()       查找子串substr最后一次出现的位置，如果查找的子串不存在时，则抛出ValueError
        #查询方法                find()         查询子串substr第一次出现的位置，如果查找的子串不存在时，则返回-1
        #                      rfind()        查询子串substr最后一次出现的位置，如果查找的子串不存在时，则返回-1
    #字符串的大小写转换操作的方法
        #功能                   方法名称                     作用
        #                       upper()                 把字符串中所有的字符都转成大写字母
        #                       lower()                 把字符串中所有的字符都转成小写字母
        #大小写转换               swapcase()              把字符串中的所有大写字母转成小写字母，把所有小写字母转成大写字母
        #                       capitalize()            把第一个字符转换成大写，把其余字符转换成小写
        #                       title()                 把每个单词的第一个字符转换成大写，把每个单词的剩余字符转换成小写
    #字符串内容对齐操作的方法
        #功能                   方法名称                        作用
        #                      center()          居中对齐，第1个参数指定宽度，第2个参数指定填充符，
        #                                        第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串
        #                      ljust()           左对齐，第1个参数指定宽度，第2个参数指定填充符，
        #                                        第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串
        #字符串对齐              rjust()           右对齐，第1个参数指定宽度，第2个参数指定填充符，
        #                                        第2个参数是可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串
        #                      zfill()           右对齐，左边用0填充，该方法只接收一个参数，用于指定字符串的宽度，
        #                                        如果指定的宽度小于等于字符串的长度，返回字符串本身
    #字符串劈分操作的方法
        #功能                   方法名称                 作用
        #                                     从字符串的左边开始劈分，默认的劈分字符是空格字符串，返回的值是一个列表
        #                      split()        以通过参数sep指定劈分字符串的是劈分符
        #                                     通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大劈分之后，剩余的子串会单独做为一部分
        #字符串的劈分                            从字符串的右边开始劈分，默认的劈分字符是空格字符串，返回的值是一个列表
        #                      rsplit()       以通过参数sep指定劈分字符串的是劈分符
        #                                     通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大劈分之后，剩余的子串会单独做为一部分
    #判断字符串操作的方法
        #功能                   方法名称                     作用
        #                    isidentifier()              判断字符串是不是合法的标识符
        #                    isspace()                   判断指定的字符串是否全部由空白字符串组成(回车、换行、水平制表符)
        #判断字符串的方法       isalpha()                   判断指定字符串是否全部由字母组成
        #                    isdecimal()                 判断指定字符串是否全部由十进制的数字组成
        #                    isnumeric()                 判断指定的字符串是否全由数字组成
        #                    isalnum()                   判断指定字符串是否全部由字母和数字组成
    #字符串操作的其他方法
        #功能                   方法名称                    作用
        #字符串替换              replace()               第1个参数指定被替换的字符串，第2个参数指定替换子串的字符串，
        #                                              该方法返回替换后得到的字符串，替换前的字符串不发生变化，
        #                                              调用该方法时可以通过第3个参数指定最大替换次数
        #字符串的合并             join()                  将列表或元组中的字符串合并为一个字符串
    #字符串的比较操作
        #运算符:>、>=、<、<=、==、!=
        #比较规则:首先比较两个字符串的第一个字符，如果相等则继续比较下一个字符，依次比较下去
        #        直到两个字符串中的字符不相等时，其比较结果就是两个字符串的比较结果，两个字符串中所有后续字符将不再被比较
        #比较原理:两个字符进行比较时，比较的是其ordinal value(原始值)，调用内置函数ord可以得到指定字符的ordinal value
        #       与内置函数ord对应的是内置函数chr，调用内置函数chr时指定ordinal value可以得到其对应的字符
    #字符串的切片操作
        #字符串是不可变类型
            #不具备增、删、改等操作
            #切片操作将产生新的对象
    #格式化字符串:按一定格式输出的字符串
        #为什么需要格式化字符串
        #格式化字符串的两种方式
            #%作占位符
                    #--->%s--->字符串
                    #--->%i/%d--->整数
                    #--->%f--->浮点数
            #{}作占位符
    #字符串的编码与解码
        #为什么需要字符串的编码转换
            #str在内存中以Unicode表示
        #编码与解码的方式
            #编码：将字符串转换为二进制数据(bytes)
            #解码：将bytes类型的数据转换成字符串类型
'''字符串的驻留机制'''
a='python'
b="python"
c='''python'''
print(a,id(a))
print(b,id(b))
print(c,id(c))
'''字符串的常用操作'''
#字符串的查询操作
s='hello,hello'
print(s.index('lo'))    #3
print(s.find('lo'))     #3
print(s.rindex('lo'))   #9
print(s.rfind('lo'))    #9

#print(s.index('k'))  #ValueError: substring not found
print(s.find('k'))      #-1
#print(s.rindex('k'))    #ValueError: substring not found
print(s.rfind('k'))     #-1

#字符串中的大小写转换的方法
s='hello,python'
a=s.upper() #转成大写之后会产生一个新的字符串对象
print(a,id(a))
print(s,id(s))
b=s.lower() #转成小写之后会产生一个新的字符串对象
print(b,id(b))
print(s,id(s))
print(b==s)
print(b is s)   #False

s2='hello,Python'
print(s2.swapcase())

print(s2.title())

#字符串内容对齐的操作方法
s3='hello,Python'
'''居中对齐'''
print(s3.center(20,'*'))
'''左对齐'''
print(s3.ljust(20,'*'))
print(s3.ljust(10))
print(s3.ljust(20))
'''右对齐'''
print(s3.rjust(20,'*'))
print(s3.rjust(10))
print(s3.rjust(20))
'''右对齐，使用0进行填充'''
print(s.zfill(20))
print(s.zfill(10))
print('-8910'.zfill(8))

#字符串的劈分操作
'''split()从左侧开始劈分'''
s='hello world python'
lst=s.split()   #默认分隔符是空格
print(lst)
s1='hello|world|Python'
lst1=s1.split(sep='|')
print(lst1)
lst2=s1.split(sep='|',maxsplit=1)
print(lst2)
'''rsplit()从右侧开始劈分'''
print(s.rsplit())
print(s1.rsplit(sep='|'))
print(s1.rsplit(sep='|',maxsplit=1))    #区分

#字符串判断的相关方法
s4='hello,python'
print('1',s.isidentifier()) #False
print('2','hello'.isidentifier())   #True
print('3','张三_'.isidentifier())    #True
print('4','张三_123'.isidentifier())  #True

print('5','\t'.isspace())           #True
print('6','abc'.isalpha())          #True
print('7','张三'.isalpha())          #True
print('8','张三1'.isalpha())         #False

print('9','123'.isdecimal())        #True
print('10','123四'.isdecimal())     #False
print('11','123'.isnumeric())       #True
print('12','123四'.isnumeric())     #True
print('13','abc1'.isalnum())        #True
print('14','张三123'.isalnum())      #True
print('15','abc!'.isalnum())        #False

#字符串操作的其他方法
'''字符串的替换'''
s5='hello,Python'
print(s5.replace('Python','Java'))
s6='hello,Python,Python,Python'
print(s6.replace('Python','Java',2))
'''字符串的合并'''
lst3=['hello','java','Python']
print('|'.join(lst3))
print(' '.join(lst3))

t=('hello','java','python')
print(' '.join(t))

print('*'.join('python'))   #python做为字符串序列进行连接

#字符串的比较操作
print('apple'>'app')    #True
print('apple'>'banana')     #False
print(ord('a'),ord('b'))

print(chr(97),chr(98))

'''== 与 is的区别
 ==比较的是value
 is 比较的是id是否相等'''
a=b='python'
c='python'
print(a==b) #True
print(b==c) #True

print(a is b)   #True
print(a is c)   #True
print(id(a),id(b),id(c))

#字符串的切片操作
s='hello,python'
s1=s[:5]    #由于没有指定起始位置，所以默认从0开始
s2=s[6:]    #由于没有指定结束位置，所以默认切到字符串的最后一个元素
s3='!'
newstr=s1+s3+s2
print(s1)
print(s2)
print(newstr)
print('----------------------------------------')
print(id(s))
print(id(s1))
print(id(s2))
print(id(s3))
print(id(newstr))

print('------------切片[start:end:step]------------')
print(s[1:5:1]) #从1开始截到5(不包含5)，步长为1
print(s[::2])   #默认从0开始，没有写结束，默认到字符串的最后一个元素，步长为2
print(s[::-1])  #默认从字符串的最后一个元素开始，到字符串的第一个元素结束，因为步长为负数

#格式化字符串
'''(1)%占位符'''
name='张三'
age=20
print('我叫%s,今年%d岁' % (name,age))
'''(2){}占位符'''
print('我叫{0},今年{1}岁'.format(name,age))
'''(3)f-string'''
print(f'我叫{name}，今年{age}岁')
#表示字符串宽度和精度的操作
'''1.表示宽度'''
print('%10d' % 99)  #10表示的是宽度
'''2.表示精度'''
print('%.3f' % 3.1415926)   #.3f表示的是小数点后三位
print('{0:.3}'.format(3.1415926))   #.3表示是一共3位数
print('{0:.3f}'.format(3.1415926))  #.3f表示3位小数，0表示索引，可以省略
'''3.同时表示宽度和精度'''
print('%10.3f' % 3.1415926) #10.3f表示宽度为10，小数点后3位
print('{:10.3f}'.format(3.1415926)) #同时设置宽度和精度，一共是10位，其中3位是小数部分

# 字符串的编码与解码
'''编码'''
str='天涯共此时'
print(str.encode(encoding='GBK'))   #在GBK这种编码格式中，一个中文占两个字节
print(str.encode(encoding='UTF-8')) #在UTF-8这种编码格式中，一个中文占三个字节
'''解码'''
#byte代表的是一个二进制数据(字节类型的数据)
byte=str.encode(encoding='GBK')     #编码
print(byte.decode(encoding='GBK'))  #解码
bytes=str.encode(encoding='UTF-8')      #编码
print(bytes.encode(encoding='UTF-8'))   #解码
