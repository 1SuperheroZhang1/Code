# Superhero Zhang
#函数
    #什么是函数？ 函数就是执行特定任务和完成特定功能的一段代码
    #为什么需要函数
        #复用代码
        #隐藏实现细节
        #提高可维护性
        #提高可读性便于调试
    #函数的创建和调用
        #函数的创建
            #def 函数名([输入参数]):               --->def calc(a,b):
            #   函数体                                 c=a+b
            #  [return xxx]                         return c
        #函数的调用                                --->result=calc(a,b)
            #函数名([实际参数])                         print(result)
    #函数的参数传递
        #函数调用的参数传递
            #位置实参--->根据形参对应的位置进行实参传递
            #关键字实参--->根据形参名称进行实参传递
    #函数的返回值
        #(1)如果函数没有返回值【函数执行完毕之后，不需要给调用处提供数据】 return可以省略不写
        #(2)函数的返回值，如果是1个，直接返回原类型
        #(3)函数的返回值，如果是多个，返回的结果为元组
    #函数的参数定义
        #函数定义默认值参数--->函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参
        #个数可变的位置参数--->定义函数时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数
        #              --->使用*定义个数可变的位置形参，结果为一个元组
        #个数可变的关键字形参--->定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参
        #                --->使用**定义个数可变的关键字形参，结果为一个字典
    #递归函数
        #什么是递归函数：如果在一个函数的函数体内调用了函数本身，这个函数就称为递归函数
        #递归函数的组成部分：递归调用与递归终止条件
        #递归调用过程:
        #             每递归调用一次函数，都会在栈内存分配一个栈帧
        #             每执行完一次函数，就会释放相应的空间
        #递归的优缺点：
        #优点：思路和代码简单
        #缺点：占用内存多，效率低下
#变量的作用域:程序代码能访问该变量的区域
    #根据变量的有效范围可分为:
        #局部变量:  在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就会成为全局变量
        #全局变量:  函数体外定义的变量，可作用于函数内外
def calc(a,b):  #a,b称为形式参数，简称形参，形参的位置是在函数的定义处
    c=a+b
    return c
'''位置传参'''
result=calc(10,20)  #10,20称为实际参数的值，也称实参，实参的位置是在函数的调用中
print(result)
'''关键字传参'''
res=calc(b=20,a=10) #= 左侧的变量名称称为关键字参数
print(res)

def fun(args1,args2):
   print('args1',args1)
   print('args2',args2)
   args1=100
   args2.append(10)
   print('args1',args1)
   print('args2',args2)

n1=11
n2=[22,33,44]
print('n1',n1)
print('n2',n2)
fun(n1,n2)  #位置传参， args1 args2是函数定义的形参，n1,n2是函数调用处的实参。总结，形参和实参名称可以不一致
print('n1',n1)
print('n2',n2)

'''在函数调用过程中，进行参数的传递，

如果是不可变对象，在函数体的修改不会影响实参的值， args1的修改为100，不会影响n1的值
如果是可变对象，在函数体的修改会影响到实参的值     args2的修改,append(10),会影响到n2的值
'''

print(bool(0))  #False
print(bool(8))  #非0的布尔值为True

def fun(num):
    odd=[]  #存奇数
    even=[] #存偶数
    for i in num:
        if i%2:
            odd.append(i)
        else:
            even.append(i)
    return odd,even

#函数的调用
lst=[10,29,34,23,44,53,55]
print(fun(lst))

'''无返回值'''
def fun():
    print('hello')
fun()
'''返回值为1个'''
def fun1():
    return 'hello'
res=fun1()
print(res)
'''返回值为多个'''
def fun2():
    return 'hello','world'
print(fun2())
'''函数在定义时，是否需要返回值，视情况而定'''

def fun(a,b=10):    #b称为默认值参数
    print(a,b)

#函数的调用
fun(100)
fun(20,30)
#函数定义时的   可变的位置参数--->返回值为元组
def Fun(*args):
    print(args)

Fun(10)
Fun(10,30)
Fun(20,306,50)
#函数定义时的  可变的关键字参数--->返回值为字典
def Fun1(**args):
    print(args)

Fun1(a=10)
Fun1(a=20,b=30,c=40)

'''
def fun(*args,*a):
    pass
    以上代码，程序会报错,个数可变的位置参数，只能有1个
'''
'''
def fun(**args,**a):
    pass
    以上代码，程序会报错，个数可变的关键字参数，也只能有1个
'''
def fun2(*args1,**args2):
    pass
'''def fun3(**agrs1,*args2):
    pass
在一个函数的定义过程中，既有个数可变的位置参数，也有个数可变的关键字参数。要求：个数可变的位置形参，放在个数可变的关键字形参之前    
'''
def fun1(a,b,c):    #函数定义是的参数传递，称为形式参数
    print('a=',a)
    print('b=',b)
    print('c=',c)

#函数的调用
fun1(10,20,30)   #函数调用时的参数传递，称为位置参数
lst=[11,22,33]
fun1(*lst)  #在函数调用时，将列表中的每个元素都转换为位置实参传入
print('--------------------------------')
fun1(a=100,c=300,b=200) #函数的调用，所以是关键字实参
dic={'a':111,'b':222,'c':333}
fun1(**dic) #在函数调用时，将字典中的键值对都转换为关键字实参传入

'''函数定义时的形参的顺序问题'''
def fun5(a,b,*,c,d,**args):
    pass
def fun6(*args,**args2):
    pass
def fun7(a,b=10,*args,**args2):
    pass

'''变量的作用域'''
def fun(a,b):
    c=a+b     #c称为局部变量，因为c在函数体内进行定义的变量，a,b为函数的形参，作用范围也是函数内部，相当于局部变量
    print(c)

#print(c)           因为a,c超出了起作用的范围(超出了作用域)
#print(a)

name='zhangsan'     #name作用范围为函数的内部和外部都可以使用---->称为全局变量
print(name)
def fun2():
    print(name)
#调用函数
fun2()

def fun3():
    global age          #函数内部定义的变量：局部变量，如果使用global声明，这个变量实际上就变成了全局变量
    age=20
    print(age)
fun3()
print(age)

'''递归函数'''
def fac(n):
    if n==1:
        return 1
    else:
        ret=n*fac(n-1)
        return ret

print(fac(6))

def fib(n):
    if n==1:
        return 1
    elif n==2:
        return 1
    else:
        return fib(n-1)+fib(n-2)
#斐波那契数列第6位的数字
print(fib(6))
print('-------------------------------------')
#输出斐波那契数列前6位上的数字
for i in range(1,7):
    print(fib(i))
