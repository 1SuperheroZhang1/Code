# Superhero Zhang
#编程思想
    #编程界的两大阵营
    #                           面向过程                            面向对象
    #区别                事物比较简单，可以用线性的思维去解决       事物比较复杂，使用简单的线性思维无法解决
    #共同点              面向过程和面向对象都是解决实际问题的一种思维方式
    #                   两者相辅相成，并不是对立的
    #                   解决复杂问题，通过面向对象方式便于我们从宏观上把握事物之间复杂的关系，方便我们分析整个系统，具体到微观操作，仍然使用面向过程方式来处理
#类与对象
    #类：类别、分门别类、物以类聚、人类、鸟类、动物类、植物类
        #   类是多个类似事物组成的群体的统称。能够帮助我们快速理解和判断事物的性质
        #数据类型：不同的数据类型属于不同的类------>使用内置函数type()查看数据类型
        #类的创建：
            #创建类的语法：class 类名:
            #               pass
        #类的组成:s
        #类属性
            #类中的方法外的变量称为类属性，被该类的所有对象所共享
        #实例方法
        #静态方法
            #使用@staticmethod修饰的方法，使用类名直接访问的方法
        #类方法
            #使用@classmethod修饰的方法，使用类名直接访问的方法
        #动态绑定属性和方法
            #python是动态语言，在创建对象之后，可以动态地绑定属性和方法
    #对象：类的实例化---------->python中一切皆对象
        #对象的创建：又称为类的实例化
            #语法：实例名=类名()
            #例子：
                    #stu=Student('Jack',20)  创建Student类的实例对象
                    #print(stu.name)  #实例属性
                    #print(stu.age)   #实例属性
                    #stu.info()       #实例方法
            #意义：有了实例，就可以调用类中的内容
#面向对象的三大特征：
    #封装：提高程序的安全性
        #将数据(属性)和行为(方法)包装到类对象中。
        #在方法内部对属性进行操作，在类对象的外部调用方法，这样，无需关心方法内部的具体实现细节，从而隔离了复杂度
        #在python中没有专门的修饰符用于属性的私有，如果该属性不希望在类对象外部被访问，前面使用两个'_'
    #继承：提高代码的复用性
        #语法格式: class 子类类名(父类1,父类2,...):
        #           pass
            #如果一个类没有继承任何类，则默认继承object
            #python支持多继承
            #定义子类时，必须在其构造函数中调用父类的构造函数
        #方法重写:
            #如果子类对继承自父类的某个属性或方法不满意，可以在子类中对其(方法体)进行重新编写
            #子类重写后的方法可以通过super().xxx()调用父类中被重写的方法
        #object类：
            #object类是所有类的父类，因此所有类就有object类的属性和方法
            #内置函数dir()可以查看指定对象的所有属性
            #Object有一个__str__()方法，用于返回一个对于”对象的描述“，
            #对应于内置函数str()经常用于print()方法，帮我们查看对象的信息，所以我们经常会对_str_()进行重写
    #多态：提高程序的可扩展性和可维护性
        #多态就是’具有多种形态‘
        #即使不知道一个变量所引用的对象到底是什么类型，任然可以通过这个变量调用方法，在运行过程中根据变量所引用的类型，动态决定调用哪个对象中的方法
    #静态语言和动态语言关于多态的区别：
        #静态语言实现多态的三个必要条件：
            #继承
            #方法重写
            #父类引用指向子类对象
        #动态语言的多态：崇尚”鸭子类型“------------->当看到一只鸟走起来像鸭子，游起来像鸭子，那么这只鸟就可以被称为鸭子
        #             在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的行为。
#特殊方法和特殊属性
    #                               名称                              描述
    #特殊属性                      __dict__           获得类对象或实例对象所绑定的所有属性和方法的字典
    #                            __len__()          通过重写__len__()方法，让内置函数len()的参数可以是自定义类型
    #                            __add__()          通过__add__()方法，可使用自定义对象具有”+“功能
    #特殊方法                      __new__()          用于创建对象
    #                            __init__()         对创建的对象进行初始化
class Student:  #Student为类的名称(类名)由一个或多个单词组成，每个单词的首字母大写，其余小写
    pass
#Python中一切皆对象-------------->Student是对象，内存有开辟空间
print(id(Student))  #2221936255808
print(type(Student))  #<class 'type'>
print(Student)  #<class '__main__.Student'>

class Student:  #Student为类的名称(类名)由一个或多个单词组成，每个单词的首字母大写，其余小写
    native_place='吉林'   #直接写在类里的变量，称为类属性
    def __init__(self,name,age):
        self.name=name  #self.name称为实体属性，进行了一个赋值操作，将局部变量的name的值赋给实体属性
        self.age=age
    #实例方法
    def eat(self):
        print('学生在吃饭...')
    #静态方法
    @staticmethod
    def method():
        print('我使用了staticmethod进行修饰，所以我是静态方法')
    #类方法
    @classmethod
    def cm(cls):
        print('我是类方法，因为我使用了classmethod进行修饰')
#在类之外定义的称为函数
def drink():
    print('喝水')
#创建Student类的对象
stu1=Student('zhangsan',20)
stu1.eat()
print(stu1.name)
print(stu1.age)
print('----------------------------')
Student.eat(stu1)   #类名.方法名(类的对象)------>实际上就是方法定义处的self属性

#类属性的使用方式
#print(Student.native_place)
stu2=Student('lisi',20)
stu3=Student('wangwu',20)
print(stu2.native_place)
print(stu3.native_place)
Student.native_place='天津'
print(stu2.native_place)
print(stu3.native_place)
print('---------类方法的使用方式---------')
Student.cm()
print('---------静态方法的使用方式---------')
Student.method()

class Student:
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def eat(self):
        print(self.name+'在吃饭')

s=Student('zhangsan',20)
s1=Student('lisi',30)
print(id(s))
print(id(s1))
print('-----------为s动态绑定性别属性-----------')
s.gender='女'    #动态绑定属性
print(s.name,s.age,s.gender)
#print(s1.name,s1.age,s1.gender) #AttributeError: 'Student' object has no attribute 'gender'
print(s1.name,s1.age)
print('----------------------')
s.eat()
s1.eat()

def show():
    print('定义在类之外的，称为函数')
s.show=show #动态绑定方法
s.show()

#s1.show()   #AttributeError: 'Student' object has no attribute 'show'

class Car:
    def __init__(self,brand):
        self.brand=brand
    def start(self):
        print('汽车已启动...')

car=Car('宝马x5')
car.start()
print(car.brand)
'''面向对象的三大特征之---------封装'''
class Student:
    def __init__(self,name,age):
        self.name=name
        self.__age=age #年龄不希望在类的外部被使用，所以加了两个__
    def show(self):
        print(self.name,self.__age)

stu=Student('zhangsan',20)
stu.show()
#在类的外部使用name与age
print(stu.name)
#print(stu.__age)    #AttributeError: 'Student' object has no attribute '__age'
#print(dir(stu))
print(stu._Student__age) #在类的外部可以通过_Student__age 进行访问

'''面向对象的三大特征之--------------继承'''
#单继承
class Person(object):
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def info(self):
        print(self.name,self.age)
class Student(Person):
    def __init__(self,name,age,stu_num):
        super().__init__(name, age)
        self.stu_num=stu_num
class Teacher(Person):
    def __init__(self,name,age,teachofyear):
        super().__init__(name,age)
        self.teachofyear=teachofyear

stu=Student('zhangsan',20,1001)
teacher=Teacher('lisi',34,10)

stu.info()
teacher.info()
#多继承
class A(object):
    pass
class B(object):
    pass
class C(A,B):
    pass

#方法重写
class Person(object):
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def info(self):
        print(self.name,self.age)
class Student(Person):
    def __init__(self,name,age,stu_num):
        super().__init__(name, age)
        self.stu_num=stu_num
    def info(self):
        super().info()
        print(self.stu_num)
class Teacher(Person):
    def __init__(self,name,age,teachofyear):
        super().__init__(name,age)
        self.teachofyear=teachofyear
    def info(self):
        super().info()
        print(self.teachofyear)

stu=Student('zhangsan',20,1001)
teacher=Teacher('lisi',34,10)

stu.info()
print('----------------------------')
teacher.info()

#object类
class Student():
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def __str__(self):
        return '我的名字是{0}，今年{1}岁'.format(self.name,self.age)

stu=Student('zhangsan',20)
print(dir(stu))
print(stu)  #默认会调用__str__()方法
print(type(stu))
'''面向对象的三大特征之一-----------多态'''
class Animal(object):
    def eat(self):
        print('动物会吃')
class Dog(Animal):
    def eat(self):
        print('狗吃骨头...')
class Cat(Animal):
    def eat(self):
        print('猫吃鱼')

class Person():
    def eat(self):
        print('人吃五谷杂粮')

#定义一个函数
def fun(obj):
    obj.eat()

#开始调用函数
fun(Cat())
fun(Dog())
fun(Animal())
print('------------------------')
fun(Person())

'''特殊属性和特殊方法'''
#特殊属性
#print(dir(object))
class A:
    pass
class B:
    pass
class C(A,B):
    def __init__(self,name,age):
        self.name=name
        self.age=age
#创建C类对象
x=C('jack',20) #x为C类型的实例对象
print(x.__dict__)   #实例对象的属性字典
print(C.__dict__)   #类对象的字典
print('-------------------------')
print(x.__class__)  #<class '__main__.C'>,输出了对象所属的类
print(C.__bases__)  #(<class '__main__.A'>, <class '__main__.B'>),输出了父类的元组
print(C.__base__)   #类的基类----》class C(A,B)输出离它最近的父类
print(C.__mro__)    #查看类的层次结构
print(A.__subclasses__())   #查看子类的列表
#特殊方法

a=20
b=100
c=a+b
d=a.__add__(b)

print(c)
print(d)

class Student:
    def __init__(self,name):
        self.name=name
    def __add__(self,other):
        return self.name+ other.name
    def __len__(self):
        return len(self.name)
s2=Student('zhangsan')
s3=Student('lisi')

s=s2+s3 #实现了两个对象的加法运算(因为在Student类中,编写了__add__()特殊的方法)
print(s)
s=s2.__add__(s3)
print(s)
print('--------------------------')
lst=[11,22,33,44]
print(len(lst)) #len是内置函数len
print(lst.__len__())
print(len(s2))

class Person(object):
    def __new__(cls, *args, **kwargs):
        print('__new__被调用执行了,cls的id值为{0}'.format(id(cls)))
        obj=super().__new__(cls)
        print('创建的对象的id为：{0}'.format(id(obj)))
        return obj

    def __init__(self,name,age):
        print('__init__被调用了，self的id值为：{0}'.format(id(self)))
        self.name=name
        self.age=age

print('object这个类的对象的id为：{0}'.format(id(object)))
print('Person这个类的对象的id为：{0}'.format(id(Person)))

#创建Person类的实例对象
p1=Person('zhangsan',20)
print('p1这个Person类的实例对象的id:{0}'.format(id(p1)))
#类的浅拷贝和深拷贝
    #变量的赋值操作
        #只是形成两个变量，实际上还是指向同一个对象
    #浅拷贝
        #Python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个子对象
    #深拷贝
        #使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象,源对象和拷贝对象所有的子对象也不相同
class CPU:
    pass
class Disk:
    pass
class Computer:
    def __init__(self,cpu,disk):
        self.cpu=cpu
        self.disk=disk

#(1)变量的赋值
cpu1=CPU()
cpu2=cpu1
print(cpu1,id(cpu1))
print(cpu2,id(cpu2))
#(2)类的浅拷贝
print('-------------------------------------')
disk=Disk() #创建一个硬盘类对象
computer=Computer(cpu1,disk)    #创建一个计算机类对象

#浅拷贝:拷贝时，对象包含的子对象对象不拷贝，所以原对象与拷贝对象会引用同一个子类对象
import copy
computer2=copy.copy(computer)
print(computer,computer.cpu,computer.disk)
print(computer2,computer2.cpu,computer2.disk)
print('----------------------------------------------')
#深拷贝:递归拷贝对象中包含的子对象，原对象与拷贝对象所有的子对象也不相同
computer3=copy.deepcopy(computer)
print(computer,computer.cpu,computer.disk)
print(computer3,computer3.cpu,computer3.disk)
