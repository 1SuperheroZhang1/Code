#define  _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//函数指针的应用 - 转移表 - 计算器
void menu()
{
	printf("*******************************\n");
	printf("**      1.add   2.sub        **\n");
	printf("**      3.mul   4.div        **\n");
	printf("**      5.xor   0.exit           **\n");
	printf("*******************************\n");
}
int Add(int x,int y)
{
	return x + y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Div(int x, int y)
{
	return x / y;
}
int Xor(int x, int y)//Xor - 异或 - 逻辑运算
{
	return x ^ y;
}
//int main()
//{
//	int input=0;
//	int x = 0;
//	int y = 0;
//	int (*pfArr[])(int, int) = {0,Add,Sub,Mul,Div,Xor};//pfArr 是一个函数指针数组 - 转移表
//	do
//	{
//		menu();
//		printf("请输入:>");
//		scanf("%d", &input);
//		if (input >= 1 && input <= 5)
//		{
//			printf("请输入两个操作数:>");
//			scanf("%d%d", &x, &y);
//			int ret = pfArr[input](x, y);
//			printf("%d\n", ret);
//		}
//		else if (input == 0)
//		{
//			printf("退出\n");
//		}
//		else 
//		{
//			printf("选择错误\n");
//		}
//	} while (input);
//	return 0;
//}		
//void Calc(int (*pf)(int,int))//Calc()函数为回调函数
//{
//	int x;
//	int y;
//	printf("请输入两个操作数:>");
//	scanf("%d%d", &x, &y);
//	printf("%d\n", pf(x, y));
//}
//int main()
//{
//	int input=0;
//	int x = 0;
//	int y = 0;
//	do
//	{
//		menu();
//		printf("请输入:>");
//		scanf("%d", &input);
//		switch (input)
//		{
//		case 1:
//			Calc(Add);
//			break;
//		case 2:
//			Calc(Sub);
//			break;
//		case 3:
//			Calc(Mul);
//			break;
//		case 4:
//			Calc(Div);
//			break;
//		case 5:
//			Calc(Xor);
//			break;
//		case 0:
//			printf("退出！");
//			break;
//		default:
//			printf("非法输入！");
//		}
//	} while (input);
//	return 0;
//}
//回调函数:一个通过函数指针调用的函数。
//把函数的指针(地址)作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，就说这是回调函数。
//回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另一方调用的，用于对该事件或条件进行响应。	
//void print(char * str)//print()为回调函数
//{
//	printf("hehe:%s\n",str);
//}
//void test( void (*p)(char*))
//{
//	printf("test\n");
//	p("bit");
//}
//int main()
//{
//	test(print);
//	return 0;
//}
//冒泡排序函数 - 只能排序整形数组
//void bubble_sort(int arr[], int sz)
//{
//	//...
//	int i = 0;
//	for (i = 0; i < sz-1; i++)
//	{
//		//一趟冒泡排序
//		int j = 0;
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//			}
//		}
//	}
//}
//qsort - 可以排序任意类型的数据
//qsort为库函数 使用时需要引用头文件 头文件为#include<stdlib.h>
//qsort()函数原型 
//void qsort(void *base,	//base-->Start of target array
//							   size_t num,  //num -->Array size in elements
//							   size_t width,//width-->Element size in bytes
//							   int(*compare)(const void *elem1,const void *elem2));//compare-->Comparison function 
//																				   //elem1-->Pointer to the key for the compare
//																				   //elem2-->Pointer to the array element to be compared with the key	
//																				   //void*类型的指针 可以接受任意类型的指针
//																				   //void*类型的指针 不能进行解引用操作
//																				     void*类型的指针 不能进行"+"、"-"整数的操作
//int main()
//{
//	int a = 10;
//	int* pa=&a;
//	//char* pc=&a;//warning
//	/*char ch = 'w';
//	void* p = &ch;
//	p=&ch;*/
//
//	void* p = &a;
//	//*p = 0;//err - void*类型的指针不能进行解引用操作
//	//p++;   //err - void*类型的指针不能进行"+"、"-"操作
//
//	return 0;
//}
//qsort()函数的使用
//#include<stdlib.h>
//#include<string.h>
//int cmp_int(const void* e1, const void* e2)
//{
//	//比较两个整型值的大小
//	return *(int*)e1-*(int*)e2;
//}
//void test1()
//{
//	int arr[10] = { 1,3,5,7,9,2,4,6,8,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//
//	//bubble_sort(arr,sz);
//	qsort(arr, sz, sizeof(arr[0]), cmp_int);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//int cmp_float(const void* e1,const void* e2)
//{
//	return *(float*)e1 - *(float*)e2;
//}
//void test2()
//{
//	float f[] = {9.0,8.0,7.0,6.0,5.0,4.0};
//	int sz = sizeof(f) / sizeof(f[0]);
//	qsort(f,sz,sizeof(f[0]),cmp_float);
//	int j = 0;
//	for (j = 0; j < sz; j++)
//	{
//		printf("%f ",f[j]);
//	}
//}
//struct Stu
//{
//	char name[20];
//	int age;
//};
//int cmp_stu_by_age(const void* e1, const void* e2)
//{
//	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
//}
//
//int cmp_stu_by_name(const void* e1, const void* e2)
//{
//	//比较名字就是比较字符串
//	//字符串比较不能直接用>、<、= =来比较，应该用strcmp()函数
//	return strcmp(((struct Stu*)e1)->name,((struct Stu*)e2)->name);
//}
//void test3()
//{
//	struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10}};
//	int sz = sizeof(s) / sizeof(s[0]);
//	qsort(s,sz,sizeof(s[0]), cmp_stu_by_age);
//	qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);
//}
//int main()
//{
//	//test1();
//	//test2();
//	test3();
//	return 0;
//}
//qsort()函数 void qsort(void* base,size_t num,size_t width,int(*compare)(const void* ele1,const void* ele2))
//指向函数指针数组的指针:是一个指针 - 指针指向一个数组 - 数组的元素是函数指针
int Add(int x,int y)
{
	return x + y;
}
int main()
{
	int arr[10] = {0};	//数组
	int (*p)[10] = &arr;//数组指针 - 指向数组的指针
    int(*pf)(int, int); //函数指针 - 指向函数的指针
	int (*pfArr[4])(int, int);//pfArr是一个数组 - 函数指针数组
	int (*(*ppfArr)[4])(int, int)=&pfArr;//ppfArr是一个指向 [函数指针数组] 的指针
	//ppfArr是一个数组指针 - 指针指向的数组有4个元素 指向数组的每个元素的元素类型是 函数指针int(*)(int,int)
	return 0;
}
