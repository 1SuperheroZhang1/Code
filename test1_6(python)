# Superhero Zhang
#为什么需要列表？
    #变量可以存储一个元素，而列表是一个”大容器“，可以存储N多个元素，程序可以方便的对这些数据进行整体操作。
    #列表相当于其它语言中的数组
#列表对象的创建
    #1.列表需要使用中括号[],元素之间使用英文的逗号进行分隔
    #2.列表的创建方式
        #使用中括号
        #调用内置函数list()
#列表的特点
    #列表的特点
        #列表元素按顺序有序排序
        #索引映射唯一的数据
        #列表可以存储重复的数据
        #任意数据类型混存
        #根据需要动态分配和回收内存
#列表的查询操作
    #获取列表中指定元素的索引
        #index()
            #如查列表中存在N个相同元素，只返回相同元素中第一个元素的索引
            #如果查询的元素在列表中不存在，则会抛出ValueError
            #还可以在指定的start和stop之间进行查找
    #获取列表中的单个元素
        #获取单个元素
            #正向索引从0~N-1 例如：lst[0]
            #逆向索引从-N~-1 例如：lst[-N]
            #指定索引不存在，抛出IndexError
    #获取列表中的多个元素
        #语法格式
            #列表名[start : stop : step]
            #切片操作：
                #切片结果--->原列表片段的拷贝
                #切片的范围--->[start,stop)
                #step默认为1--->简写为[start,stop]
                #step为正数--->[ : stop : step]--->切片的第一个元素默认是列表的第一个元素                 从start开始往后计算切片
                #         --->[start : : step]--->切片的最后一个元素默认是列表的最后一个元素
                #step为负数--->[ : stop : step]--->切片的第一个元素默认是列表的最后一个元素                从start开始往前计算切片
                #         --->[start : : step]--->切片的最后一个元素默认是列表的第一个元素
    #列表元素的判断和遍历
        #判断指定的元素在列表中是否存在
                #元素 in 列表名
                #元素 not in 列表名
        #元素的遍历
                #for 迭代变量 in 列表名 :
                    #操作
#列表元素的增加操作
    #增加操作:
        #方法/其他   操作描述
        #append()   在列表末尾添加一个元素
        #extend()   在列表末尾至少添加一个元素
        #insert()   在列表的任意位置添加一个元素
        #切片        在列表的任意位置添加至少一个元素
#列表元素的删除操作
    #删除操作
        #方法/其他   操作描述
        #remove()
                   #一次删除一个元素
                   #重复元素值删除第一个
                   #元素不存在抛出ValueError
        #pop()
                   #删除一个指定索引位置上的元素
                   #指定索引不存在抛出IndexError
                   #不指定索引，删除列表中最后一个元素
        #切片       #一次至少删除一个元素
        #clear()   #清空列表
        #del       #删除列表
#列表元素的修改操作
    #修改操作
        #为指定索引的元素赋予一个新值
        #为指定的切片赋予一个新值
#列表元素的排序操作
    #排序操作的常见两种方式
        #调用sort()方法，列表中的有所有元素默认按照从小到大的顺序进行排序，可以指定reverse=True，进行降序排序
        #调用内置函数sorted(),可以指定reverse=True,进行降序排序，原列表不发生改变
#列表生成式
    #“生成列表的公式”
        #语法格式
            #[i*i for i in range(1,10)]
            #i*i表示列表元素的表达式
            #i表示自定义变量
            #range(1,10)表示可迭代对象
        #注意事项:“表示列表元素的表达式”通常包含自定义变量
a=10 #变量存储的是一个对象的引用
lst=['hello','world',98]
print(id(lst))
print(type(lst))
print(lst)

#列表的创建
'''创建列表的第一种方式，使用[]'''
lst=['hello','world',98]
'''创建列表的第二种方式，使用内置函数list()'''
lst2=list(['hello','world',98])

#获取列表中指定元素的索引
lst=['hello','world',98,'hello']    #如果列表中含有相同元素只返回列表中相同元素的第一个索引值
print(lst.index('hello'))
#print(lst.index('python'))          #ValueError: 'python' is not in list
#print(lst.index('hello',1,3))        #ValueError: 'hello' is not in list
print(lst.index('hello',1,4))         #3

#获取列表中指定的元素
lst=['hello','world',98,'hello','world',234]
#获取索引为2的元素
print(lst[2])
#获取列表为-3的元素
print(lst[-3])
#获取索引为10的元素
#print(lst[10])  #IndexError: list index out of range

#获取列表中的多个元素
lst=[10,20,30,40,50,60,70,80]
#start=1,stop=6,step=1
#print(lst[1:6:1])
print('原列表',id(lst))
lst2=lst[1:6:1]
print('切的片段',id(lst2))
print(lst[1:6]) #默认步长为1
print(lst[1:6:])
#start=1,stop=6,step=2
print(lst[1:6:2])
#stop=6,step=2,start采用默认--->start默认为列表的第一个元素
print(lst[ :6:2])
#start=1,step=2,stop采用默认--->stop默认为列表的最后一个元素
print(lst[1: :2])
print('---------------步长step为负数的情况-----------------')
print('原列表',lst)
print(lst[ : :-1])
#start=7,stop省略，step=-1
print(lst[7: :-1])
#start=6,stop=0，step=-2
print(lst[6:0:-2])

#判断指定的元素在列表中是否存在
print('p' in 'python')  #True
print('k' not in 'python')  #True

lst=[10,20,'python','hello']
print(10 in lst)    #True
print(100 in lst)   #False
print(10 not in lst)    #False
print(100 not in lst)   #True
print('----------------------')
for item in lst:
    print(item)

#列表元素的增加操作
#向列表元素末尾添加一个元素--->append()
lst=[10,20,30]
print('添加元素之前',lst,id(lst))
lst.append(100)
print('添加元素之后',lst,id(lst))

#在列表的末尾至少添加一个元素--->extend()
lst2=['hello','world']
#lst.append(lst2)    #将lst2作为一个元素添加到列表的末尾
lst.extend(lst2)     #在列表的末尾一次性添加多个元素
print(lst)
#在列表的任意位置添加一个元素--->insert()
lst.insert(1,90)
print(lst)
#在列表的任意位置添加至少一个元素
lst3=['True','False','hello']
lst[1:]=lst3
print(lst)

#列表元素的删除操作
lst=[10,20,30,40,50,60,30]
#从列表中移除一个元素，如果有重复元素，只移第一个元素
lst.remove(30)
print(lst)
#lst.remove(100) #ValueError: list.remove(x): x not in list

#pop()根据索引移除元素
lst.pop(4)
print(lst)
#lst.pop(5)  #IndexError: pop index out of range 如果指定的索引位置不存在，将抛出异常
lst.pop()
print(lst)  #如果不指定参数，默认删除列表最后一个参数

#切片操作
print('---------切片操作-删除至少一个元素，将产生一个新的列表对象----------------')
new_list=lst[1:3]
print('原列表',lst)
print('切片后的列表',new_list)

'''不产生新的列表对象，而是删除原列表中的内容'''
lst[1:3]=[]
print(lst)

'''清楚列表中的所有元素'''
lst.clear()
print(lst)

'''del语句将列表对象删除'''
del lst
#print(lst)  #NameError: name 'lst' is not defined

#列表元素的修改操作
lst=[10,20,30,40]
#一次修改一个值
lst[2]=100
print(lst)
#一次修改多个值
lst[1:3]=[300,400,500,600]
print(lst)

#列表元素的排序操作
lst=[20,40,10,98,54]
print('排序前的列表',lst,id(lst))
#开始排序，调用列表对象的sort()方法，升序排序
lst.sort()
print('排序后的列表',lst,id(lst))

#通过指定关键字参数，将列表中的元素进行降序排序
lst.sort(reverse=True)  #reverse=True表示降序排序，reverse=False就是升序排序
print(lst)
lst.sort(reverse=False)
print(lst)

print('-------------使用内置函数sorted()对列表进行排序，将产生一个新的列表对象------------------------')
lst=[20,40,10,98,54]
print('原列表',lst,id(lst))
#开始排序
new_list=sorted(lst)
print(lst)
print('新列表',new_list,id(new_list))
#使用关键字参数，实现列表元素的降序排序
desc_list=sorted(lst,reverse=True)
print(desc_list)

#列表生成式
lst=[i*i for i in range(1,10)]
print(lst)

'''列表中的元素的值为2，4，6，8，10'''
lst2=[i*2 for i in range(1,6)]
print(lst2)
