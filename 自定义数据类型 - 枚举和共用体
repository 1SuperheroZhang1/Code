#include<stdio.h>
//枚举：把可能的取值一一列举
//使用#define定义常量
//#define RED 0
//#define GREEN 1
//#define BLUE 2
//
//int main()
//{
//	int color = RED;
//	return 0;
//}
/*枚举的优点：
  1.增加代码的可读性和可维护性
  2.和#define定义的标识符比较，枚举有类型检查，更加严谨
  3.防止了命名污染(封装)
  4.便于调试
  5.使用方便，一次可以定义多个常量
*/
/*
   枚举类型的大小：为整形大小，都是4个字节
*/
//枚举类型
//enum Sex {
//	//枚举的可能取值 - 枚举常量
//	//给枚举常量赋初始值
//	MALE,
//   FEMALE=9,
//   SECRET
//};
//
//enum Color {
//	RED,//0
//	GREEN,//1
//	BLUE//2
//};
//int main()
//{
//	//enum Sex s = MALE;
//	enum Color c = BLUE;//只能拿枚举常量给枚举变量赋值，才不会出现类型的差异
//
//	printf("%d\n",sizeof(c));//enum类型的大小为整形的大小 - 4个字节
//	printf("%d %d %d\n",RED,GREEN,BLUE);
//	//printf("%d %d %d\n",MALE,FEMALE,SECRET);
//	return 0;
//}
//C语言源代码-->预编译-->编译-->链接-->可执行程序

//联合(共用体)
/*联合类型的定义 - 联合也是一种特殊的自定义类型
                   这种类型定义的变量也包含一系列的成员
     特征是这些成员公用同一块空间(所以联合体也叫共用体)
*/
/* 联合体的大小：
   联合体的成员是共用同一块内存空间的。
   一个联合体变量的大小，至少是最大成员的大小(因为联合至少得有能力保存最大的那个成员)
*/
//联合类型
//union Un {
//    char c;
//    int i;
//};
//
//int main()
//{
//    union Un u;
//    printf("%d\n",sizeof(u));
//
//    printf("%p\n", &(u));
//    printf("%p\n",&(u.c));
//    printf("%p\n", &(u.i));
//    return 0;
//}

//int main()
//{
//    //int a = 0x11223344;
//    //低地址-------------------->高地址
//    //...[][][][][11][22][33][44][][][][][][]...   - 大端字节序存储模式
//    //...[][][][][44][33][22][11][][][][][][]...   - 小端字节序存储模式
//    // 讨论一个数据放在内存中存放的字节顺序
//    //大小端字节序问题
//    return 0;
//}

//面试题：判断当前计算机的大下端存储
//1.
//int check_sys()
//{
//    int a = 1;
//    //返回1，表示小端
//    //返回0，表示大端
//    return *(char*)&a;
//}
//2.
//int check_sys()
//{
//    union un {
//        char c;
//        int i;
//    }u;
//    u.i = 1;
//    //返回1，表示小端
//    //返回0，表示大端
//    return u.c;
//}
//int main()
//{
//    
//    int ret=check_sys();
//    if (ret == 1)
//    {
//        printf("小端\n");
//    }
//    else
//    {
//        printf("大端\n");
//    }
//   /* int a = 1;
//    if (1 == *(char*)&a)
//    {
//        printf("小端\n");
//    }
//    else
//    {
//        printf("大端\n");
//    }*/
//}

/*联合体大小的计算
  联合体的大小至少是最大成员的大小。
  当最大成员的大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍
*/
//union un {
//    int a;//4 8 - 4
//    char arr[5];//5  1  8 - 1
//};
//
//int main()
//{
//    union un u;
//    printf("%d\n",sizeof(u));
//    return 0;
//}
