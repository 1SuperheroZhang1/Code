#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//经典的笔试题 - 错误的代码
//1.
//void GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//}
//void test(void)
//{
//	char* str = NULL;
//	GetMemory(str);
//	strcpy(str, "Hello World");//程序崩溃
//	printf(str);
//}
//
//int main()
//{
//	test();
//	return 0;
//}
//1.运行代码程序会出现崩溃的现象。
/*2.程序存在内存泄漏的问题。 - str以值传递的形式给p，p是GetMemory函数的形参，只在函数内部有效，等GetMemory返回之后，
    动态开辟内存尚未释放，并且无法找到，所以会导致内存泄漏的问题。
*/

//改正1
//void GetMemory(char** p)
//{
//	*p = (char*)malloc(100);
//}
//void test(void)
//{
//	char* str = NULL;
//	GetMemory(&str);
//	strcpy(str, "Hello World");//程序崩溃
//	printf(str);
//	free(str);
//	str = NULL;
//}
//
//int main()
//{
//	test();
//	return 0;
//}

//改正2
//char* GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//	return p;
//}
//void test(void)
//{
//	char* str = NULL;
//	str=GetMemory(str);
//	strcpy(str, "Hello World");//程序崩溃
//	printf(str);
//	free(str);
//	str = NULL;
//}
//
//int main()
//{
//	test();
//	return 0;
//}
//2.非法访问内存空间 - 返回栈区内存空间的问题
//char* GetMemory(void)
//{
//    char p[] = "Hello World";
//    return p;
//}
//
//void test(void)
//{
//    char* str = NULL;
//    str = GetMemory();
//    printf(str);
//}
//
//int main()
//{
//    test();
//    return 0;
//}

//int* test()
//{
//    int a = 10;//栈区
//    //static int a=10;//静态区
//    return &a;
//}
//int main()
//{
//    int *p=test();
//    *p = 20;//
//    return 0;
//}

//int* test()
//{
//    int* ptr = malloc(100);//堆区
//    return ptr;
//}
//int main()
//{
//    int* p = test();
//    return 0;
//}

//3.
//void GetMemory(char** p, int num)
//{
//    *p = (char*)malloc(num);
//}
//void test(void)
//{
//    char* str = NULL;
//    GetMemory(&str,100);
//    strcpy(str, "hello");
//    printf(str);//忘记释放动态开辟的内存，导致内存泄漏
//    //改正
//    free(str);
//    str = NULL;
//}
//int main()
//{
//    test();
//    return 0;
//}

//4.
//void test(void)
//{
//    char* str = (char*)malloc(100);
//    strcpy(str, "hello");
//    free(str);//free释放str指向的空间之后，并不会把str置为NULL.释放空间之后，应该手动改为空指针。
//    str=NULL;//改
//    if (str != NULL)
//    {
//        strcpy(str, "world");
//        printf(str);
//    }
//}
//int main()
//{
//    test();
//    return 0;
//}

/*C.C++程序的内存开辟：
   C/C++程序内存分配的几个区域：
    1.栈区(stack):在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。
    栈区主要存放运行函数而分配的局部变量，函数参数，返回数据，返回地址等。
    2.堆区(heap):一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收，分配方式类似于链表。
    3.数据段(静态区):(static)存放全局变量，静态数据，程序结束后由系统释放。
    4.代码段:存放函数体(类成员函数和全局函数)的二进制代码。
*/
/*柔性数组(flexible array) :
   C99中，结构体中的最后一个元素允许是未知大小的数组，这就叫做【柔性数组】成员
   柔性数组的特点：
   1.结构体中的柔性数组成员前面必须至少一个其他成员。
   2.sizeof返回的这种结构体的大小，不包括柔性数组的内存。
   3.包含柔性数组成员的结构体用malloc()函数进行动态内存分配，并且分配的内存应该大于结构体的大小，
     以适应柔性数组的预期大小。
    柔性数组的优势：
    1.方便内存的释放
    2.有利于提高内存访问速度
*/
//struct S {
//    int n;
//    int arr[10];
//};
//struct S {
//    int n;
//    int arr[];//未知大小
//};
//struct S {
//    int n;
//    int arr[0];//未知大小 - 柔性数组成员 - 数组的大小是可以调整的
//};
//int main()
//{
//    //struct S s;
//    //printf("%d\n",sizeof(s));
//    struct S* ps = (struct S*)malloc(sizeof(struct S) + 5 * sizeof(int));
//    ps->n = 100;
//    int i = 0;
//    for (i = 0; i < 5; i++)
//    {
//        ps->arr[i] = i;//0 1 2 3 4
//    }
//    for (i = 0; i < 5; i++)
//    {
//        printf("%d ",ps->arr[i]);
//    }
//    struct S* ptr = realloc(ps, 44);
//    if (ptr != NULL)
//    {
//        ps = ptr;
//    }
//    for (i = 5; i < 10; i++)
//    {
//        ps->arr[i] = i;
//    }
//    for (i = 0; i < 10; i++)
//    {
//        printf("%d ", ps->arr[i]);
//    }
//    //释放空间
//    free(ps);
//    ps = NULL;
//    return 0;
//}

//struct S {
//    int n;
//    int* arr;
//};
//int main()
//{
//    struct S* ps = (struct S*)malloc(sizeof(struct S));
//    ps->arr = malloc(sizeof(int)*5);
//
//    int i = 0;
//    for (i = 0; i < 5; i++)
//    {
//        ps->arr[i] = i;
//    }
//    for (i = 0; i < 5; i++)
//    {
//        printf("%d ",ps->arr[i]);
//    }
//    //调整大小
//    int* ptr = realloc(ps->arr,sizeof(int)*10);
//    if (ptr != NULL)
//    {
//        ps->arr = ptr;
//    }
//    for (i = 5; i < 10; i++)
//    {
//        ps->arr[i] = i;
//    }
//    for (i = 0; i < 10; i++)
//    {
//        printf("%d ",ps->arr[i]);
//    }
//    //释放内存
//    free(ps->arr);
//    ps->arr = NULL;
//    free(ps);
//    ps = NULL;
//}
