# Superhero Zhang
#字典:
    #python内置的数据结构之一，与列表一样是一个可变序列。
    #以键-值对的方式存储数据，字典是一个无序的序列。
#字典的实现原理:
    #字典的实现原理与查字典类似，查字典是先根据部首或拼音查找汉字对应的页码,python中的字典是根据key查找value所在的位置。
#字典的创建:
    #字典的创建:
        #最常用的方式：使用花括号
        #scores={'张三':100,'李四':98,'王五':45}
        #使用内置函数dict()
        #dict{name='jack',age=20}
#字典的常用操作
    #字典中元素的获取
        #获取字典中的元素：
            #[]-->举例:scores['张三']
            #get()方法-->scores.get('张三')
        #[]取值与使用get()取值的区别
            #[]如果字典中不存在指定的key,抛出KeyError异常
            #get()方法取值，如果字典中不存在指定的key,并不会抛出KeyError而是返回None,可以通过参数设置默认的value，以便指定的key不存在时返回
#字典的常用操作
    #key的判断
        #in-->指定的key在字典中存在返回True-->'张三'in scores
        #not in-->指定的key在字典中不存在返回True-->'Marry'not in scores
    #字典元素的删除
        #del-->根据指定的键将指定的键值对删除-->del scores['张三']
    #字典元素的新增
        #scores['陈六']=98
    #获取字典视图的三种方法
        #获取字典视图
            #keys()-->获取字典中所有key
            #values()-->获取字典中所有value
            #items()-->获取字典中所有key,value对
    #字典元素的遍历
        #for item in scores:
            #print(item)
#字典的特点
    #字典中所有元素都是一个key-value对，key不允许重复，value可以重复
    #字典中的元素是无序的
    #字典中的key必须是不可变对象
    #字典也可以根据需要动态的伸缩
    #字典会浪费较大的内存，是一种使用空间换时间的数据结构
#字典生成式:生成字典的公式
    #内置函数zip()
        #用于将可迭代的对象作为参数，将对象中的对应元素打包成一个元组，然后返回由这些元组组成的元素
        #字典生成式
            #{item.upper():price for item,price in zip[items,prices]}
'''字典的创建方式'''
'''使用{}创建字典'''
scores={'张三':100,'李四':98,'王五':45}
print(scores)
print(type(scores))

'''使用内置函数dict()创建字典'''
student=dict(name='jack',age=20)
print(student)

'''创建空字典'''
d={}
print(d)

'''获取字典中的元素'''
scores={'张三':100,'李四':98,'王五':45}
'''第一种方式,使用{}'''
print(scores['张三'])
#print(scores['陈六']) #KeyError: '陈六'

'''第二种方式,使用get()方法'''
print(scores.get('张三'))
print(scores.get('陈六')) #None
print(scores.get('麻七',99))

'''key的判断'''
scores={'张三':100,'李四':98,'王五':45}
print('张三' in scores)
print('张三' not in scores)

'''字典元素的删除'''
del scores['张三']        #删除指定的key-value对
#scores.clear()         #请空字典的元素
print(scores)
scores['陈六']=98        #新增元素
print(scores)
scores['陈六']=100        #修改元素
print(scores)

'''获取字典试图'''
'''获取字典中所有的key'''
scores={'张三':100,'李四':98,'王五':45}
keys=scores.keys()
print(keys,type(keys))
print(list(keys))   #将所有键组成的视图转换成列表
'''获取字典中所有的value'''
values=scores.values()
print(values,type(values))
print(list(values))
'''获取所有的键值对'''
items=scores.items()
print(items,type(items))
print(list(items))  #转换之后的列表元素是由元组组成的--->元组:由()组成的

'''字典元素的遍历'''
scores={'张三':100,'李四':98,'王五':45}
for item in scores:
    print(item,scores[item])
    #print(item,scores.get(item))

'''字典的特点'''
d={'name':'张三','name':'李四'} #key不允许重复，一旦重复会出现值覆盖的情况
print(d)

d1={'name':'张三','nickname':'张三'}#value允许重复
print(d1)

'''字典生成式'''
item=['Fruits','Books','Others']
price=[96,78,85]        #如果price=[96,78,85,100,200]在进行压缩(zip打包)的过程中,以元素小的为基准生成字典。
d2={item.upper(): price for item,price in zip(item,price)}
print(d2)

#元组:采用()定义
    #元组:python内置的数据结构之一，是一个不可变序列。
        #不可变序列与可变序列
            #不可变序列:字符串、元组
                #不可变序列:没有增，删，改的操作
            #可变序列:列表、字典
                #可变序列:可以对序列执行增，删，改操作，对象地址不发生更改
        #为什么要将元组设置为不可变序列
            #在多任务环境下，同时操作对象时不需要加锁
            #因此，在程序中尽量使用不可变序列
            #注意事项：
                #元组中存储的是对象的引用
                    #a).如果元组中对象本身是不可变对象，则不能再引用其他对象
                    #b).如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变
    #元组的创建方式:
        #1.直接使用小括号()--->t=('python','hello',90)
        #2.使用内置函数tuple()--->t=tuple(('python','hello',90))
        #3.只包含一个元组的元素需要使用逗号和小括号。--->t=(10,)
    #元组的遍历:
        #元组是可迭代对象，可以使用for..in进行遍历
            #t=tuple(('python','world',90))
            #for item in t:
                #print(item)
'''不可变序列，可变序列'''
'''可变序列   列表，字典'''
lst=[10,20,30]
print(id(lst))
lst.append(300)
print(id(lst))
'''不可变序列 字符串，元素'''
s='hello'
print(id(s))
s=s+'world'
print(id(s))
'''元组的创建方式'''
'''第一种，使用()'''
t=('python','world',98)
print(t)
print(type(t))

t2='python','world',98  #省略了()
print(t2)
print(type(t2))

t3=('python',)      #如果元组中只有一个元素，逗号必须加上，不能省略
print(t3)
print(type(t3))
'''第二种创建方式,使用内置函数tuple()'''
t1=tuple(('python','world',98))
print(t1)
print(type(t1))


'''空列表的创建方式'''
lst=[]
lst1=list()
print('空列表',lst,lst1)
'''空字典的创建方式'''
d={}
d2=dict()
print('空字典',d,d2)
'''空元组的创建方式'''
t4=()
t5=tuple()
print('空元组',t4,t5)

'''为什么要将元组设置为不可变序列'''
t=(10,[20,30],9)
print(t)
print(type(t))
print(t[0],type(t[0]),id(t[0]))
print(t[1],type(t[1]),id(t[1]))
print(t[2],type(t[2]),id(t[2]))
'''尝试将t[1]改为100'''
print(id(100))
#t[1]=100    #'tuple'对象不支持项赋值,元组是不允许修改元素的
'''由于[20,30]是列表，列表是可变序列，所以可以向列表中添加元素，而列表的内存地址不变'''
t[1].append(100)
print(t,id(t[1]))

'''元组的遍历'''
#t=tuple(('python','world',90))
t=('python','world',90)
'''第一种获取元组元素的方式，使用索引'''
print(t[0])
print(t[1])
print(t[2])
#print(t[3]) #IndexError: tuple index out of range
'''第二种获取元组元素的方式，遍历元组'''
for item in t:
    print(item)

#集合
    #什么是集合
        #集合
            #python语言提供的内置数据结构
            #与列表，字典一样都属于可变类型的序列
            #集合是没有value的字典
    #集合的创建方式:
        #直接{}--->s={'python','hello',90}
        #使用内置函数set()--->s=set(range(6))
    #集合的相关操作
        #集合元素的判断操作:in 或 not in
        #集合元素的新增操作:
            #调用add()方法，一次添中一个元素
            #调用update()方法至少添中一个元素
        #集合元素的删除操作
            #调用remove()方法，一次删除一个指定元素，如果指定的元素不存在抛出KeyError
            #调用discard()方法，一次删除一个指定元素，如果指定元素不存在不抛异常
            #调用pop()方法，一次只删除一个任意元素
            #调用clear()方法，清空集合
        #集合间的关系
            #两个集合是否相等:可以使用操作符==或！=进行判断
            #一个集合是否是另一个集合的子集:可以调用方法issubset进行判断
            #一个集合是否是另一个集合的超集:可以调用方法issuperset进行判断
            #两个集合是否没有交集:可以调用方法isdisjoint进行判断
        #集合的数学操作
            #集合之间的交集操作-->调用方法intersection()
                        #-->使用&符号
            #集合间的并集操作-->调用方法union()
                        #-->使用|符号
            #集合间的差集操作-->调用方法difference()
                        #-->使用-符号
            #集合间的对称差集操作-->调用方法symmertic_difference()方法
                        #-->使用^符号
        #集合生成式
            #用于生成集合的公式-->{ i*i for i in range(1,10)}--> i*i 表示集合元素的表达式,i 表示自定义变量,range(1,10)表示可迭代对象
            #将{}修改为[]就是列表生成式
            #没有元组生成式
'''集合的创建方式'''
'''第一种创建方式 使用{}'''
s={2,3,4,5,5,6,7,7} #集合中的元素不允许重复
print(s)

'''第二种创建方式 使用内置函数set()'''
s1=set(range(6))
print(s1,type(s1))

s2=set([1,2,4,5,5,5,6,6,6])
print(s2,type(s2))

s3=set((1,2,4,4,5,65))      #集合中的元素是无序的
print(s3,type(s3))

s4=set('python')
print(s4,type(s4))          #集合中的元素是无序的

s5=set({12,4,34,55,44,4})
print(s5,type(s5))

#定义一个空集合
s6={}   #dict字典类型
print(s6,type(s6))
s7=set()
print(s7,type(s7))

'''集合的相关操作'''
s={10,20,30,40,50}
'''集合元素的判断操作'''
print(10 in s)
print(100 in s)
print(10 not in s)
print(100 not in s)
'''集合元素的新增操作'''
s.add(80)  #add 一次添加一个元素
print(s)
s.update({200,400,300}) #update一次至少添加一个元素
print(s)
s.update([100,99,8])
print(s)
s.update((78,64,56))
print(s)
'''集合元素的删除操作'''
s.remove(100)
print(s)
#s.remove(500)   #KeyError: 500
s.discard(500)
s.discard(300)
print(s)
s.pop()
#s.pop(400)  #TypeError: set.pop() takes no arguments (1 given)
print(s)
s.clear()
print(s)

'''集合间的关系'''
'''两个集合是否相等(元素相同就相等)'''
s={10,20,30,40}
s2={30,40,20,10}
print(s==s2)    #True
print(s!=s2)    #False
'''一个集合是否是另一个集合的子集'''
s1={10,20,30,40,50,60}
s2={10,20,30,40}
s3={10,20,90}
print(s2.issubset(s1))  #True
print(s3.issubset(s1))  #False
'''一个集合是否是另一个集合的超集'''
print(s1.issuperset(s2))#True
print(s1.issuperset(s3))#False
'''一个集合是否和另一个集合没有交集'''
print(s2.isdisjoint(s3))    #False--->有交集为False
s4=[100,200,300]
print(s2.isdisjoint(s4))    #True --->没有交集为True

'''集合的数学操作'''
#(1)交集操作
s1={10,20,30,40}
s2={20,30,40,50,60}
print(s1.intersection(s2))
print(s1 & s2)  #& 在python中为交集操作   intersection()方法与 & 等价-->交集操作
print(s1)
print(s2)
#(2)并集操作
print(s1.union(s2))
print(s1 | s2)  #| 在python中为并集操作   union()方法与 | 等价-->并集操作
print(s1)
print(s2)
#(3)差集操作
print(s1.difference(s2))
print(s1-s2)     #- 在python中为差集操作  difference()方法与 - 等价-->差集操作
print(s1)
print(s2)
#(4)对称差集
print(s1.symmetric_difference(s2))
print(s1^s2)     #^ 在python中为对称差集操作 symmertic_difference()方法与 ^ 等价-->对称差集操作
print(s1)
print(s2)
'''列表生成式'''
lst=[i*i for i in range(10)]
print(lst)
'''集合生成式'''
s={i*i for i in range(10)}
print(s)

'''列表、字典、元组、集合总结'''
#数据结构           是否可变            是否重复            是否有序            定义符号
#列表(list)          可变              可重复              有序                []
#字典(dict)          可变              key不可重复         无序             {key,value}
#                                    value可重复
#元组(tuple)        不可变              可重复              有序                ()
#集合(set)           可变              不可重复             无序                {}
