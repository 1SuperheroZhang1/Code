#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
/* 程序翻译环境和执行环境: 在ANSI C的任何一种实现中，存在两个不同的环境。
   第1种是翻译环境，在这个环境中 源代码被转换为可执行的机器指令。 test.c(源程序，源文件)-->编译，链接-->test.exe(可执行程序)
   第2种是执行环境，它用于实际执行代码。
*/
/* 运行环境
 程序执行的过程:
  1.程序必须载入内存中，在有操作系统的环境中:一般这个由操作系统完成。在独立的环境中，程序的载入必须手工安排，
    也可能是通过可执行代码置入只读内存来完成。
  2.程序的执行便开始，接着便调用main函数 - main函数是程序的入口
  3.开始执行程序代码，这个时候程序将使用一个运行时堆栈(stack),存储函数的局部变量和返回地址。
    程序同时也可以使用静态(static)内存，存储于静态内存中的变量在程序的整个执行过程中一直保留他们的值。
  4.终止程序。正常终止main函数:也有可能是意外终止。
*/

//extern int Add(int x, int y);
//int main()
//{
//	int a=10;
//	int b = 20;
//	int arr[10] = {0};
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		arr[i] = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ",arr[i]);
//	}
//	int c = Add(a, b);
//	printf("c=%d\n",c);
//	return 0;
//}

//int fun(int value)
//{
//	int cnt = 0;
//	while (value)
//	{
//		cnt++;
//		value = value & (value - 1);
//	}
//	return cnt;
//}
//void main(void)
//{
//	printf("%d",fun(65535));
//}

//预编译(预处理)详解
/*预定义符号
  __FILE__ 进行编译的源文件
  __LINE__ 文件当前的行号
  __DATE__ 文件被编译的日期
  __TIME__ 文件被编译的时间
  __STDC__ 如果编译器遵循ANSI-C,其值为1，否则未定义
  这些预定义符号是C语言内置的。
  printf("file:%s line:%s\n",__FILE__,__LINE__);
*/
//预定义符号
//int main()
//{
//    //printf("%s\n",__FILE__);
//    //printf("%d\n",__LINE__);
//    //printf("%s\n",__DATE__);
//    //printf("%s\n",__TIME__);
//    //写日志文件log
//    int arr[10] = {0};
//    FILE* pf = fopen("log.txt","w");
//    int  i = 0;
//    for (i = 0; i < 10; i++)
//    {
//        arr[i] = i;
//        fprintf(pf,"file:%s line:%d date:%s time:%s i=%d\n",__FILE__,__LINE__,__DATE__,__TIME__,i);
//    }
//    fclose(pf);
//    pf = NULL;
//    for (i = 0; i < 10; i++)
//    {
//        printf("%d ",arr[i]);
//    }
//    return 0;
//}

//int main()
//{
//    printf("%d \n",__STDC__);//"__STDC__": 未声明的标识符
//    return 0;
//}

/*  #define定义标识符
   语法:
       #define name stuff
*/
//#define MAX 100
//#define STR "haha"
//
//#define reg register
//#define do_forever for(; ;)
//int main()
//{
//    //do_forever;
//    int max = MAX;//int max=100;
//    reg int a;//register int a;
//    register int a;
//    int max = 100;
//    printf("%d\n",max);
//    printf("%s\n",STR);
//    return 0;
//}

/* #define定义宏
   #define机制包括了一个规定，允许把参数替换到文本中，这种实现通常称为宏(macro)或定义宏(define macro)
   宏的声明方式:
   #define name(parament-list) stuff 其中parament-list是一个由逗号隔开的符号表，它们可能出现在stuff中
   注意：参数列表的左括号必须和name紧紧相连，如果两者之间有任何空白存在，参数列表就会被解释为stuff的一部分
*/
/* #define替换规则
   在程序中扩展#define定义符号和宏时，需要涉及几个步骤
   1.在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号，如果是，它们首先被替换
   2.替换文本随后被插入到程序中原来文本的位置，对于宏，参数名被它们的值替换
   3.最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号，如果是，就重复上述处理过程。
*/
/* 注意:
   1.宏参数和#define定义中可以出现其他#define定义的变量，但是对于宏，不能出现递归
   2.当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索。
*/
//#define SQUARE(X) X*X 
//int main()
//{
//    /*int ret = SQUARE(5);//int ret = 5 * 5;
//    printf("ret=%d\n", ret);*/
//    int ret = SQUARE(5+1);//SQUARE(5+1) ---> 5+1*5+1=11
//    printf("ret=%d\n",ret);
//    return 0;
//}

//#define MAX 100
//#define DOUBLE(X) X+X
//int main()
//{
//    int a = 5;
//    int ret = 10 * DOUBLE(a);//ret=10* a+a --->10* 5+5=55;
//    printf("MAX=%d\n",MAX);//100
//    printf("ret=%d\n",ret);//55
//    return 0;
//}

/* # 和 ##
   #的作用:把一个宏参数变成一个字符串
   ##的作用:把位于它两边的符号合成一个符号，它允许宏定义从分离的文本片段创建标识符
   注意:这样的连接必须产生一个合法的标识符，否则其结果就是未定义的。
*/
//void print(int a)
//{
//    printf("the value of a is %d\n",a);
//}
//int main()
//{
//    int a = 10;
//    int b = 20;
//    //printf("the value of a is %d\n",a);
//    print(a);
//    print(b);
//    return 0;
//}

//#的作用:将一个宏参数变为一个字符串
//#define PRINT(X) printf("the value of "#X" is %d\n",X)
//int main()
//{
//    //printf("Hello World\n");
//    //printf("Hello" "World\n");
//    //printf("Hel" "lo"   "World\n");
//    int a = 10;
//    int b = 20;
//    PRINT(a);
//    //printf("the value of ""a"" is %d\n",a);
//    PRINT(b);
//    //printf("the value of ""b"" is %d\n",b);
//    return 0;
//}

//##的作用:将位于##两边的符号合成一个符号，它允许宏定义从分离的文本片段创建标识符，连接必须产生合法的标识符
//#define CAT(X,Y) X##Y
//int main()
//{
//    int Class84 = 2019;
//    //printf("%d\n",Class84);
//    printf("%d\n",CAT(Class,84));
//    //printf("%d\n",CAT(Class##84));    //printf("%d\n",CAT(Class84));
//    return 0;
//}

/* 带副作用的宏参数
   当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么在使用这个宏的时候，可能会出现危险，导致不可预测的后果。
   副作用就是表达式求值的时候出现的永久性结果。
*/
//int main()
//{
//    int a = 10;
//    int b = a + 1;//1 不带副作用 - 操作完成后a的值不变
//    int b = ++a;  //2 带有副作用 - 操作完成后a的值被改变
//    return 0;
//}

//#define MAX(X,Y) ((X)>(Y)?(X):(Y))
//int main()
//{
//    int a = 10;
//    int b = 11;
//    //int max = MAX(a, b);
//    int max = MAX(a++, b++);
//    //int max = ((a++) > (b++) ? (a++) : (b++));
//    printf("%d\n",max);//12
//    printf("%d\n",a);//11
//    printf("%d\n", b);//13
//    return 0;
//}

/* 宏和函数的对比:
   宏通常被应用于执行简单的运算。不用函数的原因有二:
   1.用于调用函数和从函数返回的代码可能比实际执行这个小型计算工作所需要的时间更多，所以宏比函数在程序的规模和速度方面更胜一筹
   2.更为重要的是函数的参数必须声明为特定的类型，所以函数只能在类型合适的表达式上使用，反之这个宏可以适用于整形，长整型，
     浮点型等可以用于>来比较的类型。宏是类型无关的。
   和宏相比函数也有劣势的地方:
   1.每次使用宏的时候，一份宏定义的代码将插入到程序中，除非宏比较短，否则可能大幅度增加程序的长度
   2.宏是没法调试的
   3.宏由于与类型无关，也就不够严谨
   4.宏可能会带来运算符优先级的问题，导致程序容易出现错误。
 宏有时候也可以做函数做不到的事情。比如:宏的参数可以出现类型，但是函数做不到。
*/

/*
函数:
  函数在调用的时侯，会有函数调用和返回的开销
*/
//int Max(int x,int y)
//{
//    return (x > y ? x : y);
//}

/*
宏:
   预处理阶段就完成了替换，没有函数的调用和返回的开销
*/

/*  命名约定:
    一般来讲函数和宏的使用语法很相似。所以语言本身没法帮我们区分二者。我们平时的一个习惯是:
    把宏名全部大写 函数名不要全部大写
*/

/*#undef 这条指令用于移除一个宏定义
  #undef NAME 
    如果现存的一个名字需要被重新定义，那么它的旧名字首先要被移除
*/

//#define MAX(X,Y) ((X)>(Y)?(X):(Y))
//int main()
//{
//    int a = 10;
//    int b = 30;
//    int max = MAX(a, b);
//    printf("max=%d\n",max);
//    //max = Max(a,b);
//    //printf("max=%d\n", max);
//    return 0;
//}

//#define SIZEOF(type) sizeof(type)
//int main()
//{
//    int ret = SIZEOF(int);    //int ret = sizeof(int);
//    printf("%d\n",ret);
//    return 0;
//}

//#define MALLOC(num,type) (type*)malloc(num*sizeof(type))
//int main()
//{
//    int* p = MALLOC(10, int);    //int *p=(int *)malloc(10*sizeof(int));
//    return 0;
//}

//#undef  - 移除一个宏定义
//#define MAX 100
//int main()
//{
//    printf("MAX=%d\n",MAX);
// #undef MAX
//    printf("MAX=%d\n", MAX);
//    return 0;
//}

/* 命令行定义
  许多C的编译器提供了一种能力，允许在命令行中定义符号。用于启动编译过程。
  例如:当我们根据同一个源文件要编译出不同的一个程序的不同版本的时候，这个特性有点用处。
  (假定某个程序中声明了一个某个长度的数组，如果机器内存有限，我们需要一个很小数组，
   但是另外一个机器内存大些，我们需要一个数组能够大些。)
*/
//int main()
//{
//    int array[ARRAY_SIZE];
//    int i = 0;
//    for (i = 0; i < ARRAY_SIZE; i++)
//    {
//        array[i] = i;
//    }
//    for (i = 0; i < ARRAY_SIZE; i++)
//    {
//        printf("%d ",array[i]);
//    }
//    printf("\n");
//    return 0;
//}
//Linux下的编译指令: gcc-D ARRAY_SIZE=10 programe.c

/* 条件编译
   在编译一个程序的时候，我们如果要将一条语句(一组语句)编译或者放弃是很方便的。因为有条件编译指令。
   比如说:
          调试性代码 删除可惜 保留又碍事 所以可以选择性的编译
*/
//#define DEBUG
//int main()
//{
//    int arr[10] = {1,2,3,4,5,6,7,8,9,0};
//    int i = 0;
//    for (i = 0; i < 10; i++)
//    {
//        arr[i] = 0;
//#ifdef DEBUG
//        printf("%d ",arr[i]);
//#endif
//    }
//    return 0;
//}

//1.单分支条件编译
//int main()
//{
//    int arr[10] = {1,2,3,4,5,6,7,8,9,0};
//    int i = 0;
//    for (i = 0; i < 10; i++)
//    {
//        arr[i] = 0;
// #if 1
//        printf("%d ", arr[i]);
// #endif
//    }
//    return 0;
//}

//2.多分支条件编译
//int main()
//{
//    #if 1==1
//            printf("haha\n");
//    #elif 2==1
//            printf("hehe\n");
//    #else
//            printf("heihei\n");
//    #endif
//    return 0;
//}

//3.判断是否被定义
//#define DEBUG 0
//int main()
//{
//    /*#if defined(DEBUG)
//        printf("hehe\n");
//    #endif
//    #if !defined(DEBUG)
//        printf("haha\n");
//    #endif*/
//    #ifdef DEBUG
//        printf("hehe\n");
//    #endif
//    #ifndef DEBUG
//        printf("haha\n");
//    #endif
//    return 0;
//}

/* 文件包含
    #include指令 可以 使另外一个文件被编译。
    这种替换方式很简单:预处理器先删除这条指令，并用包含文件的内容替换。这样一个源文件被包含10次，那就实际被编译10次。
    头文件被包含的方式:
        1.本地文件包含
        #include "filename"
        查找策略:先在源文件所在的目录下查找，如果该头文件未找到，编译器就像查找库函数头文件一样在标准位置查找头文件。
                 如果找不到就提示编译错误。
        Linux环境的标准头文件路径: /usr/include
        2.库文件包含
        #include<filename.h>
        查找策略:直接去标准路径下查找，如果找不到，就提示编译错误。
*/

//#include<stdio.h>
//#include "add.h"
//int main()
//{
//    //printf("hehe\n");
//    int ret = Add(2,3);
//    printf("ret=%d\n",ret);
//    return 0;
//}
