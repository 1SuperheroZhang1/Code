# Superhero Zhang
#内置函数range()的使用
#range()函数：
        #用于生成一个整数序列
        #创建range对象的三种方式
                            #range(stop)->创建一个(0,stop)之间的整数序列，步长为1
                            #range(start,stop)->创建一个(start,stop)之间的整数序列，步长为1
                            #range(start,stop,step)->创建一个(start,stop)之间的整数序列，步长为step
        #返回值是一个迭代器对象
        #range类型的优点：不管range对象表示的是整数序列有多长，所有的range对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step,只有当用到range对象时，才回去计算序列中的相关元素
        #in 与 not in判断整数序列中是否存在(不存在)指定的整数
#range()的三种创建方式
'''第一种创建方式，只有一个参数(小括号中只给了一个数)'''
r=range(10)     #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],默认从0开始，默认相差为1作为步长
print(r)    #range(0, 10)返回值为一个迭代器对象
print(list(r))  #用于查看range对象中的整数序列   -->list是列表的意思

'''第二种方式，给了两个参数(小括号中给了两个数)'''
r=range(1,10)   #指定了起始值，从1开始，到10结束(不包含10)，默认步长为1
print(list(r))  #[1, 2, 3, 4, 5, 6, 7, 8, 9]

'''第三种创建方式，给了三个参数(小括号中给了三个参数)'''
r=range(1,10,2)
print(list(r))  #[1, 3, 5, 7, 9]

'''判断指定的整数在序列中是否存在 in,not in'''
print(10 in r)#False,10不在当前的r这个序列中
print(9 in r)#True,9在当前的r这个序列中

print(10 not in r)#True,10不在当前的r这个序列中
print(9 not in r)#False,9在当前的r这个序列中

#循环结构
    #反复做同一件事情的情况，称为循环
    #循环的分类：
            #while
            #for-in
    #语法结构
        #while 条件表达式：
            #条件执行体(循环体)
    #选择结构的if与循环结构while的区别
        #if是判断一次，条件为True,执行一次
        #while是判断N+1次，条件为True执行N次
a=1
while a<10:
    print(a)
    a+=1
#while循环的执行流程
    #四部循环法
        #初始化变量
        #条件判断
        #条件执行体(循环体)
        #改变变量
#计算0-4之间的累加和

#四步循环法
#1.初始化变量
#2.条件判断
#3.条件执行体
#4.改变变量
#总结：初始化的变量、条件判断的变量与改变的变量为同一个
#'''用于存储累加和'''
#sum=0
#'''初始化变量为0'''
#i=0
#'''条件判断'''
#while i<=4:
# '''条件执行体(循环体)'''
# sum+=i
#  '''改变变量'''
#  i+=1
#print("和为:",sum)

#计算1-100之间的偶数和
sum=0   #用于存储偶数和
'''初始化变量'''
i=1
'''条件判断'''
while i<=100:
    '''条件执行体(求和)'''
    #条件判断是否为偶数
    if not bool(i%2):
    #if i%2==0:
        sum+=i
    '''改变变量'''
    i+=1
print('1-100之间的偶数和为:',sum)

#for-in循环：
    #in表达从(字符串，序列等)中依次取值，又称为遍历
    #for-in遍历的对象必须是可迭代对象
#fpr-in的语法结构
    #for 自定义的变量 in可迭代对象:
        #循环体
    #循环体内不需要访问自定义变量，可以将自定义变量替代为下划线
for item in "Python":   #第一次取出来的是P，将P赋值给item,将item输出
    print(item)

#range(产生一个整数序列，-->也是一个可迭代对象)
for i in range(10):
    print(i)

#如果在循环体中不需要使用自定义变量，可将自定义变量写为’_‘
for _ in range(5):
    print('人生苦短，我用python')

print('使用for循环，计算1-100之间的偶数和')
sum=0   #用于存储偶数和
for i in range(1,101):
    if i%2==0:
        sum+=i
print("1-100的偶数和为:",sum)

print('100-999之间的水仙花数')
for i in range(100,1000):
    a=i//100     #获取百位
    b=i//10%10  #获取十位
    c=i%10      #获取个位
    if a**3+b**3+c**3==i:
        print(i)

#流程控制语句break
    #break语句
        #用于结束循环结构，通常与分支结构if一起使用
#从键盘录入密码，最多录入3次，如果正确就结束循环
#for item in range(3):
#    pwd=input('请输入密码:')
#    if pwd=='8888':
#        print('密码正确')
#        break
#    else:
#        print('密码不正确')
'''初始化变量'''
#i=0
#while(i<3):
#    '''条件执行体'''
#    pwd=input('请输入密码:')
#    if pwd=='8888':
#        print('密码正确')
#        break
#    else:
#        print('密码不正确')
#    '''改变变量'''
#    a+=1
#流程控制语句continue
    #continue语句
        #用于结束当前循环，进行下一次循环。通常与分支结构中的if一起使用
#输出1-50之间所有5的倍数
print('-----------使用continue-----------------')
for i in range(1,51):
    if i%5!=0:
        continue
    print(i)

#else语句
    #else语句:
        #与else语句配合使用的三种情况:
            #else的搭配：
                    #if条件表达式不成立时执行else---->if...else...
                    #没有碰到break时执行else
                                        #while...else...
                                        #for...else...
#for item in range(3):
#    pwd=input('请输入密码:')
#    if pwd=='8888':
#        print('密码正确')
#        break
#    else:
#        print('密码错误')
#else:
#    print('对不起，三次密码均错误')

#a=0
#while a<3:
#    pwd=input('请输入密码:')
#    if pwd=='8888':
#        print('密码正确')
#        break
#    else:
#        print('密码不正确')
#    '''改变变量'''
#    a+=1
#else:
#    print('对不起，三次密码均错误')

#嵌套循环
    #循环结构中又嵌套了另外的完整的循环结构，其中内层循环做为外层循环的循环体执行。
'''输出3行4列的矩形'''
for i in range(1,4):    #行标，执行三次，一次是一行
    for j in range(1,5):
        print("*",end='\t') #不换行输出
    print() #换行

#用嵌套循环实现99乘法表
for i in range(1,10):
    for j in range(1,i+1):
            print(i,"*",j,'=',i*j,end='\t')
    print()
#二重循环中的break和continue用于控制本层循环
'''流程控制语句break和continue在二重循环中的使用'''
for i in range(5):
    for j in range(1,11):
        if j%2==0:
            #break
            continue
        print(j,end='\t')
    print() #换行
