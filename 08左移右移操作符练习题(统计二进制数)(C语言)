#include<stdio.h>
#define _CRT_SECURE_NO_WARNINGS 1
//1.统计一个二进制中所含1的个数
//缺陷：不能正确计算出负数(二进制)中1的个数
//int count_bit_one(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		if (n % 2 == 1)
//		{
//			count++;
//		}
//		n = n / 2;
//	}
//	return count;
//}
// 将传过来的实参转换成无符号数，可有效避免这个问题。
//int count_bit_one(unsigned int n)
//{
//	int count = 0;
//	while (n)
//	{
//		if (n % 2 == 1)
//		{
//			count++;
//		}
//		n = n / 2;
//	}
//	return count;
//}
//
//int count_bit_one(int n)
//{
//	int count = 0;
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (((n >> i) & 1) == 1)
//		{
//			count++;
//		}
//	}
//	return count;
//}
//int count_bit_one(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		n = n & (n - 1);
//		count++;
//	}
//	return count;
//}
//13
//1101-n
//1100-n-1
//1100-n
//1011-n-1
//1000-n
//0111-n-1
//0000 
//int main()
//{
//	int a;
//	scanf_s("%d",&a);
//	//-1
//	//10000000000000000000000000000001
//	//11111111111111111111111111111110
//	//11111111111111111111111111111111 
//	//写一个函数，计算a的二进制码(补码)中有几个1
//	int count=count_bit_one(a);
//	printf("%d\n",count);
//	return 0;
//}
//2.求二进制中不同位的个数
//int get_diff_bit(int m,int n)
//{
//	int tmp = m ^ n;
//	int count = 0;
//	while (tmp)
//	{
//		tmp = tmp & (tmp - 1);
//		count++;
//	}
// return count;
//}
//int main()
//{
//	int m = 0;
//	int n = 0;
//	scanf_s("%d%d",&m,&n);
//	int count=get_diff_bit(m,n);
//	printf("count=%d\n",count);
//
//	return 0;
//}
//3.获取二进制中的奇数位和偶数位
//void print(int m)
//{
//	printf("奇数位:");
//	int i = 0;
//	for (i = 30; i >= 0; i-=2)
//	{
//		printf("%d ",(m>>i)&1);
//	}
//	printf("偶数位:");
//	for (i = 31; i >= 0; i-=2)
//	{
//		printf("%d ", (m >> i) & 1);
//	}
//}
//int main()
//{
//	int m = 0;
//	scanf_s("%d",&m);
//	print(m);
//	return 0;
//}
