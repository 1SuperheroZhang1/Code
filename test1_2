#include<stdio.h>
//整形在内存中的存储
//int main()
//{
//	int a = 20;
////00000000000000000000000000010100 -原码
////00000000000000000000000000010100 -反码
////0000 0000 0000 0000 0000 0000 0001 0100 -补码
////0x0000014
//	int b = -10;
////10000000000000000000000000001010 -原码
////11111111111111111111111111110101 -反码
////1111 1111 1111 1111 1111 1111 1111 0110 -补码
////0xFFFFFFF6
////负数的反码等于符号位不变，其他位按位取反，补码等于反码加一
//	return 0;
//}
//1.写一段代码告诉当前机器的字节序是什么?
//int main()
//{
//	int a = 1;
//	char* p =(char*) &a;
//	if(*p==1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}
//int check_sys()
//{
//	int a = 1;
//	char* p = (char*)&a;
//	if (*p == 1) {
//		return 1;
//	}
//	else
//		return 0;
//}
//int check_sys()
//{
//	int a = 1;
//	char* p = (char*)&a;
//	//返回1，小端
//	//返回0，大端
//	return *p;
//}
//int main()
//{
//	//返回1，小端
//	//返回0，大端
//	int ret = check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else {
//		printf("大端\n");
//	}
//	return 0;
//}
//指针类型的意义：
//1.指针类型决定了指针解引用操作符能访问几个字节;char* p;* p访问了1个字节;int* p;*p访问了4个字节
//2.指针类型决定了指针+1，-1，加的或者减的是几个字节;char* p;p+1,跳过一个字节，int* p,p+1,跳过一个整型 --四个字节
//2.输出什么？
//int main()
//{
//	char a = -1;
//	//10000000000000000000000000000001 -原码
//	//11111111111111111111111111111110 -反码
//	//11111111111111111111111111111111 -补码
//	//11111111  --整形提升 --11111111111111111111111111111111  -- -1
//	signed char b = -1;
//	//11111111  --整形提升 --11111111111111111111111111111111  -- -1
//	unsigned char c = -1;
//	//11111111  --整形提升 --00000000000000000000000011111111  -- 255
//	printf("a=%d,b=%d,c=%d",a,b,c);
//	return 0;
//}
//3.输出什么？
//int main()
//{
//	char a = -128;
//	//10000000000000000000000010000000
//	//11111111111111111111111101111111
//	//11111111111111111111111110000000  --补码
//	//10000000 --整形提升--11111111111111111111111110000000 --补码
//	printf("%u\n",a);
//	//%d -打印十进制的有符号数字
//	//%u -打印十进制的无符号数字
//	return 0;
//}
// 4.输出什么？
//int main()
//{
//	char a = 128;
//	//10000000000000000000000010000000
//	//11111111111111111111111101111111
//	//11111111111111111111111110000000  --补码
//	//10000000 --整形提升--11111111111111111111111110000000 --补码
//	printf("%u\n", a);
//	//%d -打印十进制的有符号数字
//	//%u -打印十进制的无符号数字
//	return 0;
////}
//5.输出什么？
//int main()
//{
//	int i = -20;
//	//10000000 00000000 00000000 00010100 -原码
//	//11111111 11111111 11111111 11101011 -反码
//	//11111111 11111111 11111111 11101100 -补码
//	//
//	unsigned int j = 10;
//	//00000000 00000000 00000000 00001010 -补码
//	
//	//11111111 11111111 11111111 11101100 -补码
//	//00000000 00000000 00000000 00001010 -补码
//	//11111111 11111111 11111111 11110110 -加之后的结果 -补码
//	//11111111 11111111 11111111 11110101 -反码
//	//10000000 00000000 00000000 00001010 -原码 -10
//	printf("%d\n", i + j);
//	//按照补码的形式进行运算，最后格式化成有符号整数
//}
//6.输出什么？
#include<windows.h>
//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0; i--)
//	{
//		printf("%u\n",i);
//		Sleep(1000);
//	}
//	//unsigned为无符号数，永远为正，运行结果为死循环
//	return 0;
//}
//7.输出什么？ 
//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d",strlen(a));
//	return 0;
//}
//8.输出什么？
//unsigned char i = 0;//unsigned char的存储范围：0~255
//int main()
//{
//	for (i = 0; i <= 255; i++)
//	{
//		printf("hello world\n");
//	}
//	return 0;
//}
