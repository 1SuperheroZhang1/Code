//初始指针模块
#include<stdio.h>
//1.
//int main() {
//
//	//printf("%d\n",sizeof(char*));
//	//printf("%d\n", sizeof(short*));
//	//printf("%d\n", sizeof(int*));
//	//printf("%d\n", sizeof(double*));
//	//指针变量即地址变量。存储变量的地址
//	//指针的大小在32位平台是4个字节，在64位平台是8个字节。
//	//int a = 0x11223344;
//	//int* pa = &a;
//	//*pa = 0;
//	//char* pc = &a;
//	//*pc = 0;
//	//指针类型决定了指针进行解引用操作时，能够访问的空间大小。
//	//int* p;    *p能够访问4个字节
//	//char* p;   *p能够访问1个字节
//	//double* p; *p能够访问8个字节
//}
//2.指针"+""-"整数
//int main() {
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = &a;
//	printf("%p\n",pa);
//	printf("%p\n",pa+1);
//	printf("%p\n",pc);
//	printf("%p\n", pc + 1);
//	//指针类型决定了指针走一步走多远(指针的步长)
//	//int* p;p+1-->4
//	// char* p;p+1-->1
//	// double* p;p+1-->8
//	return 0;
//}
/*3.野指针
    产生原因:
			  Ⅰ.指针未初始化
              Ⅱ.指针越界访问
              Ⅲ.指针指向的空间释放
    如何避免野指针
				1.指针初始化
				2.小心指针越界
				3.指针指向空间释放即使之为NULL
				4.指针使用之前检查有效性
*/
//int main()
//{
//	//Ⅰ.指针未初始化
//	//int a;//局部变量不初始化，默认是随机值
//	int* p;//局部的指针变量不初始化，被初始化为随机值
//	//Ⅱ.指针越界访问
//	int arr[10] = {0};
//	int i = 0;
//	for (i = 0; i < 12; i++) {
//		/**p=i;
//		p++;*/
//		*p++=i;
//	}
//	return 0;
//}
//Ⅲ.指针指向的空间释放
//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}

//4.指针"+""-"整数:指针的关系运算
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int* p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (int i = 0; i < sz; i++)
//	{
//		printf("%d ",*p);//*为解引用操作符
//		p = p + 1;//p++;
//	}
//	return 0;
//}
//5.指针"-"指针运算：返回两个指针地址变量之间的元素个数
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	printf("%d\n",&arr[9]-&arr[0]);//9
//	printf("%d\n", &arr[0] - &arr[9]);//-9
//}
//6.模拟实现strlen()函数
//int my_strlen(char* arr)
//{
//	char* start = arr;
//	char* end = arr;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//	//strlen -求字符串长度
//	//递归 - 模拟实现了strlen-计数器的方式1，递归的方式2
//	//
//	char arr[] = "bit";
//	int len=my_strlen(arr);
//	//int len = strlen(arr);
//	printf("%d\n",len);
//}
//7.指针的关系运算 - 比较大小
/*
   C语言标准规定：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，
   但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。
*/
//#define N_VALUES 5
//float values[N_VALUES];
//float *vp;
//int main()
//{
//	for (vp = &values[N_VALUES]; vp > &values[0];)
//	{
//		*--vp = 0;
//	}
//
//}
//8.指针和数组
//int main()
//{
//	int arr[10] = {0};
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%d ",*(p+i));
//	}*/
//	/*for (i = 0; i < 10; i++)
//	{
//		printf("%p   =====   %p\n",p+i,&arr[i]);
//	}*/
//	return 0;
//}
//9.二级指针
//int main()
//{
//	int a = 10;
//	int* pa = &a;
//	int** ppa = &pa;//ppa就是二级指针
//	//int*** pppa=&ppa;//pppa是三级指针
//	**ppa = 20;
//	printf("%d\n",**ppa);//20
//	printf("%d\n",a);//20
//	return 0;
//}
//10.指针数组和数组指针
/*
  指针数组 - 数组 - 存放指针的数组
  数组指针 - 指针 - 存放数组的指针 
*/
int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	//int* pa = &a;
	//int* pb = &b;
	//int* pc = &c;
	//整型数组-存放整形
	//字符数组-存放字符
	//指针数组-存放指针
	int* arr[3] = {&a,&b,&c};//指针数组
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		printf("%d ",*(arr[i]));//10 20 30
	}
	return 0;
}
