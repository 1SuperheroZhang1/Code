#define _CRT_SECURE_NO_WARNINGS
//字符指针模块 - 练习题
//#include<stdio.h>
//int main()
//{
//	char str1[] = "hello bit";
//	char str2[] = "hello bit";
//	char* str3 = "hello bit";
//	char* str4 = "hello bit";
//	if (str1 == str2)
//	{
//		printf("str1 and str2 are same\n");
//	}
//	else
//	{
//		printf("str1 and str2 are not same\n");
//	}
//	if (str3 == str4)
//	{
//		printf("str3 and str4 are same\n");
//	}
//	else
//	{
//		printf("str3 and str4 are not same\n");
//	}
//	return 0;
//}
//int* fun(int a, int b);//函数声明
//int(*) fun(int a, int b);//err
//int (*fun)(int a, int b);//函数指针
//(int*)fun(int a,int n);//函数声明
//回调函数 - 作业
//回调函数就是一个通过函数指针调用的函数
//回调函数一般通过函数指针实现
//回调函数一般不是函数的实现方调用，而是在特定的场景下，由另一方调用。
//回调函数是调用函数指针指向的函数
//#include<stdio.h>
//int main()
//{
//	int a[5] = {5,4,3,2,1};
//	int* ptr = (int*)(&a + 1);
//	printf("%d,%d",*(a+1),*(ptr-1));
//	return 0;
//}
//指针进阶 - 作业
//#include<stdio.h>
//int main()
//{
//	int aa[2][5] = {10,9,8,7,6,5,4,3,2,1};
//	int* ptr1 = (int*)(&aa + 1);
//	int* ptr2 = (int*)(*(aa + 1));//*(aa+1)=aa[1]
//	printf("%d,%d",*(ptr1-1),*(ptr2-1));
//	return 0;
//}
//1.编程题 实现一个函数，可以左旋字符串中k个字符。例如ABCD左旋一个字符得到BCDA,ABCD左旋两个字符得到CDAB
//旋转字符串
// Ⅰ.暴力解题法
//#include<string.h>
//#include<stdio.h>
//#include<assert.h>
////void left_move(char arr[],int k)
////{
////
////}
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	int i = 0; 
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//		//左旋转一个字符
//		//1
//		char tmp = *arr;
//		//2
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		//3
//		*(arr + len - 1) = tmp;
//	}
//}
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr,2);
//	printf("%s\n",arr);
//	return 0;
//}
//Ⅱ.三步翻转法
//abcdef
//bafedc
//cdefab
//#include<assert.h>
//#include<string.h>
//#include<stdio.h>
//void reverse(char* left,char*right)
//{
//	assert(left !=NULL);
//	assert(right!=NULL);
//	while (left<right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//void left_move(char* arr,int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k<=len);
//	reverse(arr,arr+k-1);//逆序左边
//	reverse(arr + k,arr+len-1);//逆序右边
//	reverse(arr,arr+len-1);//逆序整体
//}
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr,4);
//	printf("%s\n",arr);
//	return 0;
//}
//2.编程题 写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串。
//Ⅰ.
//#include<string.h>
//#include<stdio.h>
//
//void left_move(char *arr,int k)
//{
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//
//		char tmp = *arr;
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			*(arr + j) = *(arr + j+1);
//		}
//		*(arr + len - 1) = tmp;
//	}
//}
//int is_left_move(char *s1,char*s2)
//{
//	int len = strlen(s1);
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(s1, 1);
//		int ret = strcmp(s1,s2);
//		if (ret == 0)
//		{
//			return 1;
//		}
//	}
//	//
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret=is_left_move(arr1,arr2);
//	if (ret == 1)
//	{
//		printf("Yes\n");
//	}
//	else
//	{
//		printf("No\n");
//	}
//}
//Ⅱ.
//#include<stdio.h>
//#include<string.h>
//int is_left_move(char* str1, char* str2)
//{
//	int len = strlen(str1);
//	int len2 = strlen(str2);
//	if (len != len2)
//	{
//		return 0;
//	}
//	//1.在str1字符串中追加一个str1字符串
//	//char *strcat(char * strDestination,char* strSource);
//	//char *strncat(char *strDest,const char*strSource,size_tcount);
//	//strcat(str1,str1); //err
//	strncat(str1,str1,len);//abcdefabcdef
//	//2.判断str2指向的字符串是否为str1指向字符串的子串
//	//strstr()函数 - 找子串的
//	char * ret=strstr(str1, str2);
//	if (ret == NULL)
//	{
//		return 0;
//	}
//	else
//	{
//		return 1;
//	}
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret = is_left_move(arr1,arr2);
//	if (ret == 1)
//	{
//		printf("Yes\n");
//	}
//	else {
//		printf("No\n");
//	}
//	return 0;
//}
//3.编程题 杨氏矩阵 
//有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增的
//请编写程序在这样的矩阵中查找某个数字是否存在。
//要求：时间复杂度小于O(n)
//Ⅰ.
//#include<stdio.h>
//int FindNum(int arr[3][3],int k,int row,int col)
//{
//	int x = 0;
//	int y = col - 1;
//	while (x<=row-1&&y>=0)
//	{
//		if (arr[x][y] > k)
//		{
//			y--;
//		}
//		else if (arr[x][y] < k)
//		{
//			x++;
//		}
//		else
//		{
//			return 1;
//		}
//	}
//	//找不到
//	return 0;
//}
//int main()
//{
//	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
//	int k=7;
//	int ret = FindNum(arr,k,3,3);
//	if (ret == 1)
//	{
//		printf("找到了\n");
//	}
//	else
//	{
//		printf("未找到\n");
//	}
//	return 0;
//}
//Ⅱ.
#include<stdio.h>
int FindNum(int arr[3][3], int k, int *px, int *py)
{
	int x = 0;
	int y = *py - 1;
	while (x <= *py - 1 && y >= 0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	//找不到
	return 0;
}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 7;
	int x = 3;
	int y = 3;
	int ret = FindNum(arr, k, &x, &y);
	if (ret == 1)
	{
		printf("找到了\n");
		//返回型参数
		printf("下标为%d,%d\n",x,y);
	}
	else
	{
		printf("未找到\n");
	}
	return 0;
}
