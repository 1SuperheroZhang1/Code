# Superhero Zhang
#编码格式
    #常见的字符编码格式
        #python的解释器使用的是Unicode(内存)
        #.py文件在磁盘上使用utf-8存储(外存)
        #ASII码：7位表示1个字符，最高位为0，只能表示128个字符
        #UTF-8：变长编码，1-4个字节表示一个字符，英文1个字节，汉字3个字节-------------------->UTF-8是Unicode的实现
        #Unicode：变长编码，2个字节表示1个字符
        #GBK：英文1个字节，汉字2个字节
#文件的读写原理
    #文件的读写俗称”IO操作“
    #文件读写操作流程
    #操作原理：
        #python操作文件---->打开或新建文件---->读写文件---->关闭资源
    #文件的读写操作：
        #内置函数open()创建文件对象
        #语法规则：file=open(filename,[,mode,encoding])
                #file被创建的文件对象
#               #open()创建文件对象的函数
#               #filename要创建或打开的文件名称
#               #mode打开模式默认为只读
#               #encoding默认文本文件中字符的编码格式为gbk
#常用的文件打开模式
    #文件的类型
        #按文件中数据的组织形式，文件分为以下两大类
            #文本文件：存储的是普通”字符“文本，默认为Unicode字符集，可以使用记事本程序打开
            #二进制文件：把数据内容用”字节“进行存储，无法用记事本打开，必须使用专用的软件打开，例如mp3音频文件.jpg突破.doc文档等
            #打开模式                                        描述
            #r                     以只读模式打开文件，文件的指针将会放在文件的开头
            #w                     以只写模式打开文件，如果文件不存在则创建，如果文件存在，则覆盖原有内容，文件指针在文件的开头
            #a      以追加模式打开文件，如果文件不存在则创建，文件指针在文件的开头，如果文件存在，则在文件末尾追加内容，文件指针在原文件末尾
            #b      以二进制方式打开文件，不能单独使用，需要与其他模式一起使用，rb或者wb
            #+      以读写模式打开文件，不能单独使用，需要与其他模式一起使用,a+
    #文件对象的常用方法：
        #方法名                                   说明
        #read([size])               从文件中读取size个字节或字符的内容返回，若省略[size],则读取到文件末尾，即一次读取文件所有内容
        #readline()                 从文本文件中读取一行内容
        #readlines()                把文本文件中的每一行都作为一个独立的字符串对象，并将这些对象放入列表返回
        #write(str)                 将字符串str内容写入文件
        #writelines(s_list)         将字符串列表s_list写入文本文件，不添加换行符
        #seek(offset[,whence])      把文件指针移动到新的位置，offset表示相对于whence的位置：
                                  #offset：为正往结束方向移动，为负往开始方向移动
                                  #whence不同的值代表不同含义：
                                  #0.从文件头开始计算(默认值)
                                  #1.从当前位置开始计算
                                  #2.从文件尾开始计算
        #tell()                   返回文件指针的当前位置
        #flush()                  把缓冲区的内容写入文件，但不关闭文件
        #close()                  把缓冲区的内容写入文件，同时关闭文件，释放文件对象相关资源
    #with语句(上下文管理器)
        #with语句可以自动管理上下文资源，不论什么原因跳出with块，都能确保文件正确的关闭，以此来达到释放资源的目的。
        #with open('logo.png','rb') as src_file:
        #   arc_file.read()--------------------->with语句体
        #离开运行时上下文，自动调用上下文管理器的特殊方法_exit_()
        #open('logo.png','rb')是上下文表达式，结果为上下文管理器--------------->同时创建一个运行时上下文
        #------------>实现了__enter__()方法和__exit__()方法，，遵守了上下文管理协议--------->自动调用__enter()__方法，并将返回值赋给src_file
        #src_filesrc_file为可选项上下文管理器对象的引用[可选项]
        #目录操作:
            #OS模块是Python内置的与操作系统功能和文件系统相关的模块,该模块中的语句的执行结果通常与操作系统有关,
            #在不同的操作系统上运行,得到的结果可能不一样
            #OS模块与os.path模块用于对目录或文件进行操作
            #OS模块操作目录相关函数
                #函数                                             说明
                #getcwd()                                    返回当前的工作目录
                #listdir(path)                         返回指定路径下的文件和目录信息
                #mkdir(path[,mode])                              创建目录
                #makedirs(path1/path2...[,mode])                创建多级目录
                #rmdir(path)                                     删除目录---------->rm--------->remove
                #removedirs(path1/path2......)                 删除多级目录
                #chdir(path)                              将path设置为当前工作目录------>ch------>change
                #walk()                                          遍历指定目录下的所有文件以及目录
            #os.path模块操作目录相关函数
                #        函数                                    说明
                #abspath(path)                          用于获取文件或目录的绝对路径
                #exists(path)                用于判断文件或目录是否存在，如果存在返回True，否则返回False
                #join(path.name)                        将目录与目录或者文件名拼接起来
                #splitext()                                分离文件名和扩展名
                #basename(path)                          从一个目录中提取文件名
                #dirname(path)                     从一个路径中提取文件路径，不包括文件名
                #isdir(path)                               用于判断是否为路径
'''文件的创建'''
#file=open('a.txt','r')
#print(file.readlines())
#file.close()
'''文件的只写模式'''
#file=open('b.txt','w')
#file.write('python')
#file.close()
'''文件的追加模式'''
#file=open('b.txt','a')
#file.write('python')
#file.close()
'''以二进制模式打开文件'''
#src_file=open('4.png','rb')

#target_file=open('cpoy4.png','wb')

#target_file.write(src_file.read())

#target_file.close()
#src_file.close()

'''以读写方式打开'''
'''read([size])方法--------->从文件中读取size个字节或字符的内容返回'''
#file=open('a.txt','r')
#print(file.read(2))
#file.close()
'''readline()方法------------>从文本文件中读取一行内容'''
#file=open('a.txt','r')
#print(file.readline())
#file.close()
'''readlines()方法----------->把文本文件中的每一行都作为一个独立的字符串对象，并将这些对象放入列表返回'''
#file=open('a.txt','r')
#print(file.readlines())
#file.close()
'''write(str)方法------------>将字符串str内容写入文件'''
#file=open('c.txt','a')
#print(file.write('hello'))
#file.close()
'''writelines(s_list)方法----------->将字符串列表s_list写入文本文件，不添加换行符'''
#file=open('c.txt','a')
#lst=['java','go','python']
#print(file.writelines(lst))
#file.close()
'''seek(offset[,whence])方法------------->把文件指针移动到新的位置，offset表示相对于whence的位置'''
#file=open('a.txt','r')
#file.seek(2)
#file.seek(1)会报错，因为一个汉字是2个字节
#print(file.read())
#file.close()
'''tell()方法----------------->返回文件指针的当前位置'''
#file=open('c.txt','r')
#file.seek(2)
#print(file.read())
#rint(file.tell())
#file.close()
'''flush()方法---------------->把缓冲区的内容写入文件，但不关闭文件'''
#file=open('d.txt','w')
#file.write('hello')
#file.flush()
#file.write('world')
#ile.close()

'''with语句'''
#print(type(open('a.txt','r')))
#with open('a.txt','r') as file:
#    print(file.read())

#MyContentMgr实现了特殊方法__enter__(),__exit__()称为该类对象遵守了上下文管理器协议
#该类对象的实例对象，称为上下文管理器
#class MyContentMgr(object):
#    def __enter__(self):
#        print('enter方法被调用执行了')
#        return self

#    def __exit__(self, exc_type, exc_val, exc_tb):
#        print('exit方法被调用执行了')

#    def show(self):
#        print('show方法被调用执行了')

#with MyContentMgr() as file:    #相当于file=MyContentMgr()
#    file.show()

'''使用with语句实现文件的复制'''
#with open('4.png','rb') as src_file:
#    with open('copy2log.png','wb') as target_file:
#       target_file.write(src_file.read())

'''OS模块与操作系统相关的一个模块'''
import os
#os.system('notepad.exe')    #打开记事本
#os.system('calc.exe')        #打开计算机
#直接调用可执行文件
#os.startfile('C:\\Program Files (x86)\\Tencent\\QQ\\Bin\\qq.exe')  #打开QQ登陆页面

'''OS模块操作目录相关函数'''
import os
#print(os.getcwd())          #getcwd()返回当前的工作目录

#lst=os.listdir('../pythonProject')  #返回指定路径下的文件和目录信息
#print(lst)

#os.mkdir('dir2')        #创建目录
#os.makedirs('A/B/C')     #创建多级目录
#os.rmdir('dir2')          #删除目录
#os.removedirs('A/B/C')     #删除多级目录

'''os.path模块操作目录相关函数'''
import os.path
#print(os.path.abspath('test1_13.py'))     #用于获取文件或目录的绝对路径
#print(os.path.exists('demo1.py'))                #用于判断文件或目录是否存在
#print(os.path.join('D:\\Python','demo.py'))      #将目录与目录或文件名拼接起来
#print(os.path.split('D:\\Python\\demo.py'))      #split()分离文件路径和文件名
#print(os.path.splitext('demo.py'))               #splitext()分离文件名和扩展名
#print(os.path.basename('D:\\python\\pythonProject\\test1_13.py'))   #basename()从一个目录中提取文件名
#print(os.path.dirname('D:\\python\\pythonProject\\test1_13.py'))    #dirname()从一个路径中提取文件路径，不包括文件名
#print(os.path.isdir('D:\\python\\pythonProject\\test1_13.py'))      #isdir()用于判断是否为路径

'''列出指定目录下的所有.py文件'''
import os
path=os.getcwd()
lst=os.listdir(path)
for filename in lst:
    if filename.endswith('.py'):
        print(filename)
