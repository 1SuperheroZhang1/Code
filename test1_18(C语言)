#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<assert.h>
#include<string.h>
//1.strlen()函数 - 求字符串长度
// size_t strlen(const char * string);
// size_t==unsigned int
//1.计数器的方法
//int my_strlen(const char* str)
//{
//	int count = 0;
//	assert(str!=NULL);
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
// }
////2.递归
////3.指针 - 指针
//int main()
//{
//	/*int len = strlen("abcdef");
//	int len1 = my_strlen("abcdef");
//	printf("%d\n",len);*/
//	if (strlen("abc") - strlen("abcdef") > 0)
//	{
//		printf("hehe\n");
//	}
//	else {
//		printf("haha\n");
//	}
//	return 0;
//}
//2.strcpy()函数 - 实现字符串拷贝 - 长度不受限制的字符串函数
//char * strcpy(char * strDestination,const char * strSource);
//strncpy()函数 - 实现字符串拷贝 - 长度受限制的字符串函数
//char *strncpy(char * strDestination,const char* strSource,size_t count);
//  拷贝count个字符从源字符串到目标空间
//  如果源字符串的长度小于count，则拷贝完源字符串之后，在目标字符串的后面追加0，直到count个。
//char * my_strcpy(char *dest,char *src)
//{
//	assert(dest!=NULL);
//	assert(src!=NULL);
//	char* ret = dest;
//	//拷贝src指向的字符串 到 dest指向的空间，包含'\0'
//	//while (*src!='\0')
//	//{
//	//	*dest = *src;
//	//	dest++;
//	//	src++;
//	//}
//	//*dest = *src;//'\0'
//	//while (*src != '\0')
//	//{
//	//	*dest++ = *src++;
//	//}
//	//*dest = *src;//'\0'
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	//返回目的空间的起始地址
//	return ret;
//}
//int main()
//{
//	char arr1[5] = "abc";
//	char arr2[] = "hello bit";
//	strcpy(arr1,arr2);
//	printf("%s\n",arr1);
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "bit";
//	//strcpy(arr1,arr2);
//	my_strcpy(arr1,arr2);
//	printf("%s\n",arr1);
//	return 0;
//}
// strncpy()函数 - 模拟实现
//char* my_strncpy(char * dest,const char* src,size_t count)
//{
//	char* ret = dest;
//	while (count && (*dest++ = *src++))		/*copy string*/
//	{
//		count--;
//	}
//	if (count)								/*pad out with zeroes*/
//	{
//		while (--count)
//		{
//			*dest++ = '\0';
//		}
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[5] = "abc";
//	char arr2[] = "hello bit";
//	//strncpy(arr1, arr2,4);
//	//my_strncpy(arr1, arr2, 6); 当源字符串长度不够拷贝的字符串个数时，后边用'\0'补齐
//	printf("%s\n", arr1);
//	return 0;
//}
//3.strcat()函数 - 字符串追加函数 - 长度不受限制的字符串函数
//char * strcat(char * strDestination,const char* strSource);
//要求：strDestination目标字符串空间足够大，能容纳下源字符串的内容
//      strSource源字符串中必须包含'\0'
//strncat()函数 - 字符串追加函数 - 长度受限制的字符串函数
//char * strncat(char *strDestination,char * strSource,size_t count);
//char* my_strcat(char* dest, const char* src)
//{
//	//assert(dest!=NULL);
//	//assert(src!=NULL);
//	//assert(dest);
//	//assert(src);
//	assert(dest&&src);
//
//	char* ret = dest;
//	//1.找到目的字符串的'\0'
//	while (*dest != '\0')
//	{
//		dest++;
//	}
//	//2.追加
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[30] = "hello";
//	char arr2[] = "world";
//	//strcat(arr1,arr2);
//	my_strcat(arr1,arr2);
//	printf("%s\n",arr1);
//	return 0;
//}
//strncat()函数 - 模拟实现
//char * strncat(char* front, const char* back, size_t count)
//{
//	char* ret = front;
//	while (*front++)
//	{
//		;
//	}
//	front--;
//
//	while (count--)
//	{
//		if (!(*front++ == *back++))
//		{
//			return ret;
//		}
//		*front = '\0';
//	}
//	
//	return ret;
//}
//int main()
//{
//	char arr1[30] = "hello";
//	char arr2[] = "world";
//	//strncat(arr1,arr2,3);
//	strncat(arr1, arr2, 3);
//	printf("%s\n",arr1);
//	return 0;
//}
//4.strcmp()函数 - 字符串比较函数 - 长度不受限制的字符串函数
//int strcmp(const char* str1,const char* str2);
/*
标准规定：
	第一个字符串大于第二个字符串时，则返回大于0的数字
	第一个字符串等于第二个字符串时，则返回0
	第一个字符串小于第二哥字符串时，则返回小于0的数字
  VS环境下：
  >0    1
  =0    0
  <0    -1
*/
//strncmp()函数 - 字符串比较函数 - 长度受限制的字符串函数
//int strncmp(const char* str1,const char* str2,size_t num);
// Visual Studio编译器下的strcmp()函数实现
//int my_strcmp(const char* str1,const char* str2)
//{
//	assert(str1 && str2);
//	//比较
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;//相等
//		}
//		str1++;
//		str2++;
//	}
//	if (*str1 > *str2)
//	{
//		return 1;//大于
//	}
//	else
//	{
//		return -1;//小于
//	}
//}
// 任何编译器下的strcmp()函数实现
//int my_strcmp(const char* str1, const char* str2)
//{
//	assert(str1 && str2);
//	//比较
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;//相等
//		}
//		str1++;
//		str2++;
//	}
//	return (*str1 - *str2);
//}
//int main()
//{
//	char* p1 = "abcdef";
//	char* p2 = "sqwer";
//	//int ret = strcmp(p1,p2);
//    //printf("%d\n",ret);
//	if (strcmp(p1, p2) > 0)
//	{
//		printf("p1>p2\n");
//	}
//	else if (strcmp(p1, p2) == 0)
//	{
//		printf("p1=p2\n");
//	}
//	else
//	{
//		printf("p1<p2\n");
//	}
//	return 0;
//}
//int main()
//{
//	char* p1 = "abcdef";
//	char* p2 = "qwert";
//	int ret = my_strcmp(p1,p2);
//	printf("ret=%d\n",ret);
//	return 0;
//}
//int main()
//{
//	//strncmp - 字符串比较
//	const char* p1 = "abcdef";
//	const char* p2 = "abcqwer";
//	//int ret = strcmp(p1,p2);
//	int ret = strncmp(p1,p2,3);
//	printf("ret=%d\n",ret);
//	return 0;
//}
