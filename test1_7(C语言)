#include<stdio.h>
//一、数组参数和指针参数
//Ⅰ.一维数组传参:传过去的是数组首元素的地址
//void test(int arr[])//ok
//{}
//void test(int arr[10])//ok
//{}
//void test(int *arr)//ok
//{}
//void test2(int *arr[20])//ok
//{}
//void test2(int **arr)//ok
//{}
//int main()
//{
//	int arr[10] = {0};
//	int* arr2[20] = {0};
//	test(arr);
//	test2(arr);
//}
//Ⅱ.二维数组传参:传过去的是首元素的地址(第一行的地址)
//void test(int arr[3][5])
//{}
//void test1(int arr[][5])
//{}
////void test2(int arr[3][])//err 二维数组在传参时，行标可以省略，但列标一定不能省略
////{}
////void test3(int arr[][])//err
////{}
//
//void test4(int *arr)//err  整形指针是用来存放整形的地址
//{}
//void test5(int **arr)//err 二级指针用来存放一级指针的地址
//{}
//void test6(int(*arr)[5])//ok
//{}
//int main()
//{
//	int arr[3][5] = {0};
//	//test(arr);//二维数组传参
//	//test1(arr);
//	//test2(arr);//err
//	//test3(arr);//err
//	//test4(arr);
//	//test5(arr);//二维数组传参时传过去的是首元素的地址，也就是第一行的地址
//	test6(arr);
//	return 0;
//}
//总结:二维数组传参，函数形参的设计只能省略第一个[]的数字,即行标。因为对于一个二维数组，可以不知道有多少行，但必须知道一行有多少元素。这样才方便运算
//Ⅲ.一级指针传参
//void print(int *p,int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ",*(p+i));
//	}
//
//}
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int *p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//一级指针p，传给函数
//	print(p, sz);
//	return 0;
//}
//test1()函数能接受什么参数?
//void test1(int* p)
//{}//test1()函数可以接受变量的地址，或者存放变量地址的一级指针变量作为参数
//test2()函数能接受什么参数？
//void test2(char* p)
//{}//test2()函数可以接受变量的地址，或者存放变量地址的一级指针变量作为参数
//int main()
//{
//	int a = 10;
//	int* p1 = &a;
//	test1(&a);//ok
//	test1(p1);//ok
//	char ch = 'w';
//	char* pc = &ch;
//	test2(&ch);//ok
//	test2(pc);//ok
//	return 0;
//}
//Ⅳ.二级指针传参
//void test(int **ptr)
//{
//	printf("num=%d\n",**ptr);
//}
//int main()
//{
//	int n = 10;
//	int* p = &n;
//	int** pp = &p;
//	test(pp);
//	test(&p);
//	return 0;
//}
//test()函数能够接受什么参数?
//void test(int **p)
//{}
////test()函数可以接受一级指针变量的地址、二级指针，也可以接受指针数组作为参数
//int main()
//{
//	int* ptr;
//	int** pp = &ptr;
//	test(&ptr);
//	test(pp);
//	int* arr[10];//指针数组
//	test(arr);//指针数组传参也可以
//	return 0;
//}
//二、函数指针
//数组指针 - 指向数组的指针
//函数指针 - 指向函数的指针 - 存放 函数地址 的一个指针
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//int arr[10] = {0};
//	//int (*p)[10]=&arr//数组指针 - int(*)[10]为数组指针类型
//	//arr
//	//printf("%d\n",Add(a, b));
//
//	//&函数名 和 函数名 都是函数的地址
//	/*printf("%p\n",&Add);
//	printf("%p\n",Add);*/
//	int (*pa)(int,int)=Add;//函数指针 - int(*)(int,int)为函数指针类型
//	printf("%d\n",(*pa)(2, 3));
//	return 0;
//}
//void Print(char* str)
//{
//	printf("%s\n",str);
//}
//int main()
//{
//	void (*p)(char*)=Print;//函数指针 - void (*)(char*)为函数指针类型
//	(*p)("hello bit");
//     p("hello world");
//	return 0;
//}
//int main()
//{
//	//<<C陷阱和缺陷>>
//	//解释下列代码
//	//代码1
//	(*(void (*)())0)();			//void(*)() - 函数指针类型
//	//把0强制类型转换成void(*)() 函数指针类型 - 0就是一个函数的地址，调用0地址处的该函数
//	//代码含义：调用0地址处的函数参数为无参,返回类型为void的那个函数
//	//代码2
//	void(*               signal(int, void(*)(int))                  )(int);
//  //                     函数名(整形，函数指针类型)
//  //void (* )(int)为函数返回类型，函数返回类型为函数指针
//  //signal是一个函数声明
//  //signal函数的参数有2个，第一个是int,第二个是函数指针，该函数指针指向的函数的参数是int,返回类型是void
//  //signal函数的返回类型也是一个函数指针，该函数指针指向的参数是int,返回类型是void
//
//  //简化之后的函数
//	typedef void(*pfun_t)(int) ;//typedef unsigned int u_int;
//	pfun_t signal(int, pfun_t);
//	
//	return 0;
//}
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int (*pa)(int,int)=Add;//函数指针类型
//
//	printf("%d\n", (pa)(2, 3));
//	printf("%d\n",Add(2,3));//pa=Add
//	printf("%d\n",(*pa)(2, 3));
//	//printf("%d\n",(**pa)(2,3));
//	//printf("%d\n",(***pa)(2,3));
//	return 0;
//}
//三、函数指针数组
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int* arr[5];//指针数组
//	//需要一个数组，这个数组可以存放4个函数的地址 - 函数指针数组
//	int (*pa)(int ,int)=Add;//Sub/Mul/Div - 函数指针
//	int (*parr[4])(int, int) = {Add,Sub,Mul,Div};//存放函数指针的数组 - 函数指针数组
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d ",parr[i](2, 3));//5 -1 6 0
//	}
//	return 0;
//}
//char* my_strcpy(char* dest, const char* src);
//1.写一个函数指针pf,能够指向my_strcpy
//char* (*pf)(char*,const char*)=my_strcpy;
//2.写一个函数指针数组pfArr，能够存放4个my_strcpy的函数的地址
//char* (*pfArr[4])(char*, const char*) = { my_strcpy1,my_strcpy2,my_strcpy3,my_strcpy4 };
