test.c
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include"contact.h"

void menu()
{
	printf("********************************************\n");
	printf("****1.add            2.del           *******\n");
	printf("****3.search         4.modify        *******\n");
	printf("****5.show           6.sort          *******\n");
	printf("****0.exit                           *******\n");
	printf("********************************************\n");
}
int main()
{
	int input = 0;
	//创建通讯录
	struct Contact con;//con就是通讯录，里面包含:data指针和size，capacity
	//初始化通讯录
	InitContact(&con);
	do {
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			AddContact(&con);
			break;
		case DEL:
			DelContact(&con);
			break;
		case SEARCH:
			SearchContact(&con);
			break;
		case MODIFY:
			ModifyContact(&con);
			break;
		case SHOW:
			ShowContact(&con);
			break;
		case SORT:
			SortContact(&con);
			break;
		case EXIT:
			//销毁通讯录 - 释放动态开辟的内存
			DestroyContact(&con);
			printf("退出通讯录\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
	return 0;
}
contact.h
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//#define MAX 1000
#define DEFAULT_SZ 3
#define MAX_NAME 20
#define MAX_SEX 6
#define MAX_TELE 12
#define MAX_ADDR 30
enum Option {
	EXIT,//0
	ADD,//1
	DEL,//2
	SEARCH,//3
	MODIFY,//4
	SHOW,//5
	SORT//6
};//枚举增加了代码的可读性
struct PeoInfo {
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	char tele[MAX_TELE];
	char addr[MAX_ADDR];
};
//通讯录信息
struct Contact {
	struct PeoInfo *data;//存放1000个信息
	int size;//记录已有的元素个数
	int capacity;//记录当前通讯录的最大容量
};
//函数声明
//初始化通讯录
void InitContact(struct Contact* ps);
//增加信息到通讯录
void AddContact(struct Contact* ps);
//删除指定的通讯录联系人信息
void DelContact(struct Contact* ps);
//打印通讯录中指定联系人的信息
void ShowContact(const struct Contact* ps);
//查找通讯录中的联系人信息
void SearchContact(const struct Contact* ps);
//修改通讯录中的联系人信息
void ModifyContact(struct Contact* ps);
void SortContact(struct Contact* ps);
//摧毁通讯录
void DestroyContact(struct Contact*ps);
contact.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"contact.h"

//初始化函数
void InitContact(struct Contact* ps)
{
	ps->data = (struct PeoInfo*)malloc(DEFAULT_SZ*sizeof(struct PeoInfo));
	if (ps == NULL)
	{
		return;
	}
	else
	{
		ps->size = 0;
		ps->capacity = DEFAULT_SZ;
	}
}
void Check_Capacity(struct Contact* ps)
{
	if (ps->size == ps->capacity)
	{
		//增容
		struct PeoInfo* ptr = (struct PeoInfo*)realloc(ps->data, (ps->capacity + 2) * sizeof(struct PeoInfo));
		if (ptr != NULL)
		{
			ps->data = ptr;
			ps->capacity+=2;
			printf("增容成功\n");
		}
		else
		{
			printf("增容失败\n");
		}
	}
}
//增加函数
void AddContact(struct Contact* ps)
{
	//检测当前通讯录的容量
	//1.如果已满，就增加空间
	//2.如果不满，什么也不干
	Check_Capacity(ps);
	//增加数据
	printf("请输入名字:");
	scanf("%s", ps->data[ps->size].name);
	printf("请输入年龄:");
	scanf("%d", &(ps->data[ps->size].age));
	printf("请输入性别:");
	scanf("%s", ps->data[ps->size].sex);
	printf("请输入电话:");
	scanf("%s", ps->data[ps->size].tele);
	printf("请输入住址:");
	scanf("%s", ps->data[ps->size].addr);

	ps->size++;
	printf("添加成功\n");
	/*if (ps->size == MAX)
	{
		printf("通讯录已满，无法添加\n");
	}
	else {
		printf("请输入名字:");
		scanf("%s", ps->data[ps->size].name);
		printf("请输入年龄:");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入性别:");
		scanf("%s", ps->data[ps->size].sex);
		printf("请输入电话:");
		scanf("%s", ps->data[ps->size].tele);
		printf("请输入住址:");
		scanf("%s", ps->data[ps->size].addr);

		ps->size++;
		printf("添加成功\n");
	}*/
}
//为了降低冗余度，封装函数 -
static int FindByName(const struct Contact* ps, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (strcmp(ps->data[i].name, name) == 0)
		{
			return i;
		}
	}
	return -1;//找不到的情况
}
//删除函数
void DelContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要删除人的名字:>");
	scanf("%s", name);
	//1.查找要删除的人在什么位置
	int pos = FindByName(ps, name);
	//如果存在返回元素下标
	//如果不存在返回-1 
	//2.删除
	if (pos == -1)
	{
		printf("用户不存在\n");
	}
	else
	{
		//删除数据
		int j = 0;
		for (j = pos; j < ps->size - 1; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
		ps->size--;
	}
}
//查找函数
void SearchContact(const struct Contact* ps)
{
	char name[MAX_NAME];
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("要查找的人不存在\n");
	}
	else {
		printf("%20s\t%4s\t%5s\t%12s\t%20s\n", "名字", "年龄", "性别", "电话", "住址");
		//printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "性别", "电话", "住址");
		//数据
		printf("%20s\t%4d\t%5s\t%12s\t%20s\n",
			ps->data[pos].name,
			ps->data[pos].age,
			ps->data[pos].sex,
			ps->data[pos].tele,
			ps->data[pos].addr);
	}

}
//修改函数
void ModifyContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入修改人的名字:>");
	scanf("%s", &name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("查无此人\n");
	}
	else
	{
		printf("请输入名字:");
		scanf("%s", ps->data[pos].name);
		printf("请输入年龄:");
		scanf("%d", &(ps->data[pos].age));
		printf("请输入性别:");
		scanf("%s", ps->data[pos].sex);
		printf("请输入电话:");
		scanf("%s", ps->data[pos].tele);
		printf("请输入住址:");
		scanf("%s", ps->data[pos].addr);
	}
}
//展示函数
void ShowContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else {
		int i = 0;
		//表头
		printf("%20s\t%4s\t%5s\t%12s\t%20s\n", "名字", "年龄", "性别", "电话", "住址");//表示右对齐
		//printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "性别", "电话", "住址");表示左对齐
		//数据
		for (i = 0; i < ps->size; i++)
		{
			printf("%20s\t%4d\t%5s\t%12s\t%20s\n",
				ps->data[i].name,
				ps->data[i].age,
				ps->data[i].sex,
				ps->data[i].tele,
				ps->data[i].addr);
		}
	}
}
//排序函数
void SortContact(struct Contact* ps)
{

}
void DestroyContact(struct Contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}
