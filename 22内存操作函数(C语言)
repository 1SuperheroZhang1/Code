#include<stdio.h>
#include<assert.h>
//memcpy()函数 - 内存拷贝函数
/* void memcpy(void * destination,const void * source,size_t num); num单位是字节
   函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置
   这个函数在遇到'\0'的时候并不会停下来
   如果source和destination有任何重叠，复制的结果都是未定义的
   void * - 通用类型的指针 - 无类型的指针
*/
//struct S {
//    char name[20];
//    int age;
//};
//void* my_memcpy(void* dest, const void* src, size_t num)
//{
//    void* ret = dest;
//    assert(dest != NULL);
//    assert(src != NULL);
//    while (num--)
//    {
//        *(char*)dest = *(char*)src;
//        ++(char*)dest;
//        ++(char*)src;
//    }
//    return ret;
//}
//int main()
//{
//    /*int arr1[] = {1,2,3,4,5};
//    int arr2[5] = {0};
//    memcpy(arr2,arr1,sizeof(arr1));*/
//    struct S arr3[] = { {"zhangsan",20},{"lisi",30} };
//    struct S arr4[3] = { 0 };
//    //memcpy(arr4,arr3,sizeof(arr3));
//    my_memcpy(arr4, arr3, sizeof(arr3));
//    return 0;
//}
//memmove()函数 - 重复的内存拷贝函数
/*  void* memmove(void * destination,const void * source,size_t count);
    
*/
//C语言标准：
//memcpy 只要处理 不重叠的内存拷贝就可以
//memmove 处理重叠的内存拷贝
//void* my_memmove(void* dest, void* src, size_t count)
//{
//	void* ret = dest;
//	assert(dest != NULL);
//	assert(src != NULL);
//	if (dest<src || dest>(char*)src + count)
//	{
//		//前->后
//	}
//	else
//	{
//		//后->前
//	}
//	return ret;
//}
//void* my_memmove(void * dest,void *src,size_t count)
//{
//	void* ret = dest;
//	assert(dest!=NULL);
//	assert(src!=NULL);
//	//if (dest<src || dest>(char*)src + count)
//	//{
//	//	//前->后
//	//}
//	//else
//	//{
//	//	//后->前
//	//}
//	if (dest < src)
//	{
//		//前->后
//		while (count--)
//		{
//			*(char*)dest = *(char*)src;
//			++(char*)dest;
//			++(char*)src;
//		}
//	}
//	else
//	{
//		//后->前
//		while (count--)
//		{
//			*((char*)dest + count) = *((char*)src + count);
//		}
//	}
//	return ret;
//}
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};
//	//memmove(arr + 2, arr, 20);//处理内存重叠的情况
//	memcpy(arr + 2, arr, 20);
//
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ",arr[i]);
//	}
//	return 0;
//}
//memcmp()函数 - 内存比较函数
/*int memcmp(const void* ptr1, const void* ptr2, size_t num);  num 单位是字节
  比较从ptr1和ptr2指针开始的num个字节
*/

//int main()
//{
//    int arr1[] = {1,2,3,4,5};
//    int arr2[] = {1,2,5,4,3};
//    int ret = memcmp(arr1, arr2, 8);
//    printf("ret=%d\n",ret);//0
//    return 0;
//}

//memset()函数 - 内存设置函数
/* void* memset(void * dest,int c,size_t count);   count单位是字节
   c为要设置的字符
   count 为设置字符的个数
*/
//int main()
//{
//    char arr[10] = "";
//    memset(arr,'#', 10);
//    for (int i = 0; i < 10; i++)
//    {
//        printf("%c ",arr[i]);
//    }
//    return 0;
//}
